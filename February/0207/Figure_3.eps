%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADPAC5D.tmp.pdf
%%Creator: Adobe Acrobat 21.5.0
%%For: kosumosu
%%CreationDate: 2024/2/8, 4:59:50
%%BoundingBox: -1 0 597 505
%%HiResBoundingBox: 0 0 596.6111 504.0675
%%CropBox: 0 0 596.6111 504.0675
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 946 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c017 91.164464, 2020/06/15-10:20:05        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2024-02-08T04:59:10+09:00"
   xmp:CreatorTool="Matplotlib v3.7.2, https://matplotlib.org/"
   xmp:ModifyDate="2024-02-08T04:59:10+09:00"
   pdf:Producer="Acrobat Distiller 21.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:cf8ae819-b337-4c46-a514-6a42eba0a70e"
   xmpMM:InstanceID="uuid:0f1775c2-4ab5-45c4-ab66-91d486ffe1b6">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Figure_3.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -504.068 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-5 0 mo
-1.52588e-5 504.068 li
596.611 504.068 li
596.611 0 li
cp
clp
-59.0704 532.622 mo
660.93 532.622 li
660.93 -43.3183 li
-59.0704 -43.3183 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
30.9296 469.322 mo
588.93 469.322 li
588.93 25.8017 li
30.9296 25.8017 li
cp
f
gsave
30.9296 469.322 mo
588.93 469.322 li
588.93 25.8017 li
30.9296 25.8017 li
cp
clp
.8 lw
2 lc
1 lj
10 ml
[] 0 dsh
false sadj
56.2936 469.322 mo
56.2936 25.8017 li
1 /0 /CSD get_res sepcs
.31 sep
@
grestore
56.2936 469.322 mo
56.2936 472.822 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
56.2936 469.322 mo
56.2936 472.822 li
@
48.4896 483.312 mo
50.1006 483.312 li
50.1006 477.75 li
48.3476 478.102 li
48.3476 477.204 li
50.0916 476.852 li
51.0776 476.852 li
51.0776 483.312 li
52.6886 483.312 li
52.6886 484.142 li
48.4896 484.142 li
48.4896 483.312 li
ef
56.7886 477.501 mo
56.2806 477.501 55.8996 477.75 55.6416 478.253 cv
55.3876 478.751 55.2606 479.503 55.2606 480.504 cv
55.2606 481.505 55.3876 482.252 55.6416 482.755 cv
55.8996 483.253 56.2806 483.502 56.7886 483.502 cv
57.3016 483.502 57.6826 483.253 57.9356 482.755 cv
58.1946 482.252 58.3216 481.505 58.3216 480.504 cv
58.3216 479.503 58.1946 478.751 57.9356 478.253 cv
57.6826 477.75 57.3016 477.501 56.7886 477.501 cv
56.7886 476.72 mo
57.6036 476.72 58.2286 477.042 58.6586 477.691 cv
59.0936 478.336 59.3086 479.273 59.3086 480.504 cv
59.3086 481.73 59.0936 482.667 58.6586 483.316 cv
58.2286 483.961 57.6036 484.283 56.7886 484.283 cv
55.9736 484.283 55.3486 483.961 54.9136 483.316 cv
54.4836 482.667 54.2686 481.73 54.2686 480.504 cv
54.2686 479.273 54.4836 478.336 54.9136 477.691 cv
55.3486 477.042 55.9736 476.72 56.7886 476.72 cv
ef
62.7346 475.801 mo
60.9916 478.525 li
62.7346 478.525 li
62.7346 475.801 li
62.5536 475.199 mo
63.4216 475.199 li
63.4216 478.525 li
64.1496 478.525 li
64.1496 479.099 li
63.4216 479.099 li
63.4216 480.302 li
62.7346 480.302 li
62.7346 479.099 li
60.4306 479.099 li
60.4306 478.433 li
62.5536 475.199 li
ef
gsave
30.9296 469.322 mo
588.93 469.322 li
588.93 25.8017 li
30.9296 25.8017 li
cp
clp
2 lc
157.748 469.322 mo
157.748 25.8017 li
1 /0 /CSD get_res sepcs
.31 sep
@
grestore
157.748 469.322 mo
157.748 472.822 li
f
157.748 469.322 mo
157.748 472.822 li
@
150.01 483.312 mo
151.621 483.312 li
151.621 477.75 li
149.868 478.102 li
149.868 477.204 li
151.612 476.852 li
152.598 476.852 li
152.598 483.312 li
154.209 483.312 li
154.209 484.142 li
150.01 484.142 li
150.01 483.312 li
ef
158.309 477.501 mo
157.801 477.501 157.42 477.75 157.162 478.253 cv
156.908 478.751 156.781 479.503 156.781 480.504 cv
156.781 481.505 156.908 482.252 157.162 482.755 cv
157.42 483.253 157.801 483.502 158.309 483.502 cv
158.822 483.502 159.203 483.253 159.456 482.755 cv
159.715 482.252 159.842 481.505 159.842 480.504 cv
159.842 479.503 159.715 478.751 159.456 478.253 cv
159.203 477.75 158.822 477.501 158.309 477.501 cv
158.309 476.72 mo
159.124 476.72 159.749 477.042 160.179 477.691 cv
160.614 478.336 160.829 479.273 160.829 480.504 cv
160.829 481.73 160.614 482.667 160.179 483.316 cv
159.749 483.961 159.124 484.283 158.309 484.283 cv
157.494 484.283 156.869 483.961 156.434 483.316 cv
156.004 482.667 155.789 481.73 155.789 480.504 cv
155.789 479.273 156.004 478.336 156.434 477.691 cv
156.869 477.042 157.494 476.72 158.309 476.72 cv
ef
162.365 475.199 mo
165.075 475.199 li
165.075 475.78 li
162.997 475.78 li
162.997 477.031 li
163.096 476.997 163.199 476.973 163.298 476.956 cv
163.397 476.939 163.5 476.928 163.599 476.928 cv
164.17 476.928 164.621 477.086 164.952 477.397 cv
165.284 477.708 165.451 478.132 165.451 478.665 cv
165.451 479.215 165.281 479.642 164.939 479.947 cv
164.597 480.251 164.115 480.401 163.493 480.401 cv
163.278 480.401 163.059 480.384 162.837 480.346 cv
162.615 480.309 162.386 480.254 162.15 480.182 cv
162.15 479.489 li
162.355 479.601 162.567 479.683 162.785 479.738 cv
163.004 479.793 163.237 479.82 163.479 479.82 cv
163.872 479.82 164.187 479.718 164.416 479.509 cv
164.645 479.301 164.761 479.02 164.761 478.665 cv
164.761 478.309 164.645 478.029 164.416 477.821 cv
164.187 477.612 163.872 477.51 163.479 477.51 cv
163.295 477.51 163.11 477.53 162.926 477.571 cv
162.744 477.612 162.556 477.677 162.365 477.762 cv
162.365 475.199 li
ef
gsave
30.9296 469.322 mo
588.93 469.322 li
588.93 25.8017 li
30.9296 25.8017 li
cp
clp
2 lc
259.203 469.322 mo
259.203 25.8017 li
1 /0 /CSD get_res sepcs
.31 sep
@
grestore
259.203 469.322 mo
259.203 472.822 li
f
259.203 469.322 mo
259.203 472.822 li
@
251.41 483.432 mo
253.021 483.432 li
253.021 477.87 li
251.268 478.222 li
251.268 477.324 li
253.012 476.972 li
253.998 476.972 li
253.998 483.432 li
255.609 483.432 li
255.609 484.262 li
251.41 484.262 li
251.41 483.432 li
ef
259.709 477.621 mo
259.201 477.621 258.82 477.87 258.562 478.373 cv
258.308 478.871 258.181 479.623 258.181 480.624 cv
258.181 481.625 258.308 482.372 258.562 482.875 cv
258.82 483.373 259.201 483.622 259.709 483.622 cv
260.222 483.622 260.603 483.373 260.856 482.875 cv
261.115 482.372 261.242 481.625 261.242 480.624 cv
261.242 479.623 261.115 478.871 260.856 478.373 cv
260.603 477.87 260.222 477.621 259.709 477.621 cv
259.709 476.84 mo
260.524 476.84 261.149 477.162 261.579 477.811 cv
262.014 478.456 262.229 479.393 262.229 480.624 cv
262.229 481.85 262.014 482.787 261.579 483.436 cv
261.149 484.081 260.524 484.403 259.709 484.403 cv
258.894 484.403 258.269 484.081 257.834 483.436 cv
257.404 482.787 257.189 481.85 257.189 480.624 cv
257.189 479.393 257.404 478.456 257.834 477.811 cv
258.269 477.162 258.894 476.84 259.709 476.84 cv
ef
265.321 477.595 mo
265.01 477.595 264.764 477.701 264.583 477.913 cv
264.402 478.125 264.313 478.415 264.313 478.784 cv
264.313 479.15 264.402 479.441 264.583 479.656 cv
264.764 479.868 265.01 479.974 265.321 479.974 cv
265.632 479.974 265.875 479.868 266.056 479.656 cv
266.237 479.441 266.329 479.15 266.329 478.784 cv
266.329 478.415 266.237 478.125 266.056 477.913 cv
265.875 477.701 265.632 477.595 265.321 477.595 cv
266.692 475.431 mo
266.692 476.06 li
266.517 475.978 266.343 475.917 266.165 475.872 cv
265.991 475.828 265.817 475.807 265.642 475.807 cv
265.188 475.807 264.839 475.961 264.596 476.269 cv
264.357 476.576 264.22 477.041 264.186 477.663 cv
264.32 477.465 264.49 477.315 264.692 477.209 cv
264.894 477.103 265.119 477.048 265.362 477.048 cv
265.875 477.048 266.278 477.205 266.575 477.516 cv
266.873 477.827 267.023 478.248 267.023 478.784 cv
267.023 479.307 266.869 479.728 266.558 480.046 cv
266.247 480.364 265.837 480.521 265.321 480.521 cv
264.73 480.521 264.279 480.295 263.967 479.844 cv
263.656 479.389 263.499 478.733 263.499 477.875 cv
263.499 477.069 263.691 476.426 264.073 475.948 cv
264.456 475.466 264.969 475.226 265.615 475.226 cv
265.789 475.226 265.964 475.243 266.138 475.278 cv
266.316 475.312 266.5 475.363 266.692 475.431 cv
ef
gsave
30.9296 469.322 mo
588.93 469.322 li
588.93 25.8017 li
30.9296 25.8017 li
cp
clp
2 lc
360.657 469.322 mo
360.657 25.8017 li
1 /0 /CSD get_res sepcs
.31 sep
@
grestore
360.657 469.322 mo
360.657 472.822 li
f
360.657 469.322 mo
360.657 472.822 li
@
352.93 483.312 mo
354.541 483.312 li
354.541 477.75 li
352.788 478.102 li
352.788 477.204 li
354.532 476.852 li
355.518 476.852 li
355.518 483.312 li
357.129 483.312 li
357.129 484.142 li
352.93 484.142 li
352.93 483.312 li
ef
361.229 477.501 mo
360.721 477.501 360.34 477.75 360.082 478.253 cv
359.828 478.751 359.701 479.503 359.701 480.504 cv
359.701 481.505 359.828 482.252 360.082 482.755 cv
360.34 483.253 360.721 483.502 361.229 483.502 cv
361.742 483.502 362.123 483.253 362.376 482.755 cv
362.635 482.252 362.762 481.505 362.762 480.504 cv
362.762 479.503 362.635 478.751 362.376 478.253 cv
362.123 477.75 361.742 477.501 361.229 477.501 cv
361.229 476.72 mo
362.044 476.72 362.669 477.042 363.099 477.691 cv
363.534 478.336 363.749 479.273 363.749 480.504 cv
363.749 481.73 363.534 482.667 363.099 483.316 cv
362.669 483.961 362.044 484.283 361.229 484.283 cv
360.414 484.283 359.789 483.961 359.354 483.316 cv
358.924 482.667 358.709 481.73 358.709 480.504 cv
358.709 479.273 358.924 478.336 359.354 477.691 cv
359.789 477.042 360.414 476.72 361.229 476.72 cv
ef
365.104 475.199 mo
368.385 475.199 li
368.385 475.493 li
366.533 480.302 li
365.812 480.302 li
367.555 475.78 li
365.104 475.78 li
365.104 475.199 li
ef
gsave
30.9296 469.322 mo
588.93 469.322 li
588.93 25.8017 li
30.9296 25.8017 li
cp
clp
2 lc
462.112 469.322 mo
462.112 25.8017 li
1 /0 /CSD get_res sepcs
.31 sep
@
grestore
462.112 469.322 mo
462.112 472.822 li
f
462.112 469.322 mo
462.112 472.822 li
@
454.33 483.432 mo
455.941 483.432 li
455.941 477.87 li
454.188 478.222 li
454.188 477.324 li
455.932 476.972 li
456.918 476.972 li
456.918 483.432 li
458.529 483.432 li
458.529 484.262 li
454.33 484.262 li
454.33 483.432 li
ef
462.629 477.621 mo
462.121 477.621 461.74 477.87 461.482 478.373 cv
461.228 478.871 461.101 479.623 461.101 480.624 cv
461.101 481.625 461.228 482.372 461.482 482.875 cv
461.74 483.373 462.121 483.622 462.629 483.622 cv
463.142 483.622 463.523 483.373 463.776 482.875 cv
464.035 482.372 464.162 481.625 464.162 480.624 cv
464.162 479.623 464.035 478.871 463.776 478.373 cv
463.523 477.87 463.142 477.621 462.629 477.621 cv
462.629 476.84 mo
463.444 476.84 464.069 477.162 464.499 477.811 cv
464.934 478.456 465.149 479.393 465.149 480.624 cv
465.149 481.85 464.934 482.787 464.499 483.436 cv
464.069 484.081 463.444 484.403 462.629 484.403 cv
461.814 484.403 461.189 484.081 460.754 483.436 cv
460.324 482.787 460.109 481.85 460.109 480.624 cv
460.109 479.393 460.324 478.456 460.754 477.811 cv
461.189 477.162 461.814 476.84 462.629 476.84 cv
ef
468.155 477.999 mo
467.827 477.999 467.567 478.088 467.379 478.262 cv
467.191 478.436 467.099 478.679 467.099 478.987 cv
467.099 479.294 467.191 479.537 467.379 479.711 cv
467.567 479.886 467.827 479.975 468.155 479.975 cv
468.483 479.975 468.743 479.886 468.931 479.711 cv
469.119 479.534 469.215 479.291 469.215 478.987 cv
469.215 478.679 469.119 478.436 468.931 478.262 cv
468.743 478.088 468.487 477.999 468.155 477.999 cv
467.465 477.705 mo
467.167 477.633 466.938 477.493 466.771 477.291 cv
466.607 477.09 466.525 476.84 466.525 476.55 cv
466.525 476.143 466.668 475.818 466.959 475.582 cv
467.249 475.347 467.649 475.227 468.155 475.227 cv
468.664 475.227 469.061 475.347 469.351 475.582 cv
469.642 475.818 469.785 476.143 469.785 476.55 cv
469.785 476.84 469.703 477.09 469.536 477.291 cv
469.372 477.493 469.143 477.633 468.849 477.705 cv
469.18 477.784 469.44 477.934 469.625 478.16 cv
469.813 478.385 469.905 478.662 469.905 478.987 cv
469.905 479.482 469.755 479.862 469.45 480.125 cv
469.15 480.388 468.719 480.521 468.155 480.521 cv
467.591 480.521 467.16 480.388 466.856 480.125 cv
466.555 479.862 466.405 479.482 466.405 478.987 cv
466.405 478.662 466.497 478.385 466.685 478.16 cv
466.873 477.934 467.133 477.784 467.465 477.705 cv
467.212 476.615 mo
467.212 476.878 467.294 477.086 467.458 477.233 cv
467.625 477.38 467.858 477.456 468.155 477.456 cv
468.452 477.456 468.681 477.38 468.849 477.233 cv
469.016 477.086 469.102 476.878 469.102 476.615 cv
469.102 476.352 469.016 476.143 468.849 475.996 cv
468.681 475.849 468.452 475.774 468.155 475.774 cv
467.858 475.774 467.625 475.849 467.458 475.996 cv
467.294 476.143 467.212 476.352 467.212 476.615 cv
ef
gsave
30.9296 469.322 mo
588.93 469.322 li
588.93 25.8017 li
30.9296 25.8017 li
cp
clp
2 lc
563.566 469.322 mo
563.566 25.8017 li
1 /0 /CSD get_res sepcs
.31 sep
@
grestore
563.566 469.322 mo
563.566 472.822 li
f
563.566 469.322 mo
563.566 472.822 li
@
555.85 483.432 mo
557.461 483.432 li
557.461 477.87 li
555.708 478.222 li
555.708 477.324 li
557.452 476.972 li
558.438 476.972 li
558.438 483.432 li
560.049 483.432 li
560.049 484.262 li
555.85 484.262 li
555.85 483.432 li
ef
564.149 477.621 mo
563.641 477.621 563.26 477.87 563.002 478.373 cv
562.748 478.871 562.621 479.623 562.621 480.624 cv
562.621 481.625 562.748 482.372 563.002 482.875 cv
563.26 483.373 563.641 483.622 564.149 483.622 cv
564.662 483.622 565.043 483.373 565.296 482.875 cv
565.555 482.372 565.682 481.625 565.682 480.624 cv
565.682 479.623 565.555 478.871 565.296 478.373 cv
565.043 477.87 564.662 477.621 564.149 477.621 cv
564.149 476.84 mo
564.964 476.84 565.589 477.162 566.019 477.811 cv
566.454 478.456 566.669 479.393 566.669 480.624 cv
566.669 481.85 566.454 482.787 566.019 483.436 cv
565.589 484.081 564.964 484.403 564.149 484.403 cv
563.334 484.403 562.709 484.081 562.274 483.436 cv
561.844 482.787 561.629 481.85 561.629 480.624 cv
561.629 479.393 561.844 478.456 562.274 477.811 cv
562.709 477.162 563.334 476.84 564.149 476.84 cv
ef
568.099 480.316 mo
568.099 479.687 li
568.273 479.769 568.448 479.831 568.625 479.875 cv
568.803 479.92 568.977 479.94 569.148 479.94 cv
569.603 479.94 569.952 479.786 570.191 479.482 cv
570.433 479.174 570.57 478.71 570.604 478.084 cv
570.471 478.279 570.304 478.429 570.102 478.535 cv
569.9 478.641 569.675 478.692 569.429 478.692 cv
568.919 478.692 568.513 478.539 568.215 478.231 cv
567.918 477.92 567.771 477.5 567.771 476.963 cv
567.771 476.44 567.925 476.02 568.236 475.702 cv
568.547 475.384 568.957 475.227 569.473 475.227 cv
570.064 475.227 570.512 475.452 570.823 475.907 cv
571.134 476.358 571.291 477.014 571.291 477.876 cv
571.291 478.679 571.1 479.321 570.717 479.803 cv
570.338 480.282 569.825 480.521 569.179 480.521 cv
569.005 480.521 568.83 480.504 568.653 480.47 cv
568.475 480.436 568.29 480.384 568.099 480.316 cv
569.473 478.152 mo
569.784 478.152 570.027 478.046 570.208 477.835 cv
570.389 477.623 570.481 477.332 570.481 476.963 cv
570.481 476.597 570.389 476.307 570.208 476.095 cv
570.027 475.879 569.784 475.774 569.473 475.774 cv
569.162 475.774 568.916 475.879 568.735 476.095 cv
568.554 476.307 568.465 476.597 568.465 476.963 cv
568.465 477.332 568.554 477.623 568.735 477.835 cv
568.916 478.046 569.162 478.152 569.473 478.152 cv
ef
33.7856 469.322 mo
33.7856 471.322 li
f
.6 lw
33.7856 469.322 mo
33.7856 471.322 li
@
40.5776 469.322 mo
40.5776 471.322 li
f
40.5776 469.322 mo
40.5776 471.322 li
@
46.4616 469.322 mo
46.4616 471.322 li
f
46.4616 469.322 mo
46.4616 471.322 li
@
51.6506 469.322 mo
51.6506 471.322 li
f
51.6506 469.322 mo
51.6506 471.322 li
@
86.8336 469.322 mo
86.8336 471.322 li
f
86.8336 469.322 mo
86.8336 471.322 li
@
104.7 469.322 mo
104.7 471.322 li
f
104.7 469.322 mo
104.7 471.322 li
@
117.375 469.322 mo
117.375 471.322 li
f
117.375 469.322 mo
117.375 471.322 li
@
127.207 469.322 mo
127.207 471.322 li
f
127.207 469.322 mo
127.207 471.322 li
@
135.241 469.322 mo
135.241 471.322 li
f
135.241 469.322 mo
135.241 471.322 li
@
142.033 469.322 mo
142.033 471.322 li
f
142.033 469.322 mo
142.033 471.322 li
@
147.916 469.322 mo
147.916 471.322 li
f
147.916 469.322 mo
147.916 471.322 li
@
153.106 469.322 mo
153.106 471.322 li
f
153.106 469.322 mo
153.106 471.322 li
@
188.289 469.322 mo
188.289 471.322 li
f
188.289 469.322 mo
188.289 471.322 li
@
206.154 469.322 mo
206.154 471.322 li
f
206.154 469.322 mo
206.154 471.322 li
@
218.83 469.322 mo
218.83 471.322 li
f
218.83 469.322 mo
218.83 471.322 li
@
228.662 469.322 mo
228.662 471.322 li
f
228.662 469.322 mo
228.662 471.322 li
@
236.695 469.322 mo
236.695 471.322 li
f
236.695 469.322 mo
236.695 471.322 li
@
243.487 469.322 mo
243.487 471.322 li
f
243.487 469.322 mo
243.487 471.322 li
@
249.371 469.322 mo
249.371 471.322 li
f
249.371 469.322 mo
249.371 471.322 li
@
254.56 469.322 mo
254.56 471.322 li
f
254.56 469.322 mo
254.56 471.322 li
@
289.744 469.322 mo
289.744 471.322 li
f
289.744 469.322 mo
289.744 471.322 li
@
307.609 469.322 mo
307.609 471.322 li
f
307.609 469.322 mo
307.609 471.322 li
@
320.284 469.322 mo
320.284 471.322 li
f
320.284 469.322 mo
320.284 471.322 li
@
330.116 469.322 mo
330.116 471.322 li
f
330.116 469.322 mo
330.116 471.322 li
@
338.15 469.322 mo
338.15 471.322 li
f
338.15 469.322 mo
338.15 471.322 li
@
344.942 469.322 mo
344.942 471.322 li
f
344.942 469.322 mo
344.942 471.322 li
@
350.825 469.322 mo
350.825 471.322 li
f
350.825 469.322 mo
350.825 471.322 li
@
356.015 469.322 mo
356.015 471.322 li
f
356.015 469.322 mo
356.015 471.322 li
@
391.198 469.322 mo
391.198 471.322 li
f
391.198 469.322 mo
391.198 471.322 li
@
409.063 469.322 mo
409.063 471.322 li
f
409.063 469.322 mo
409.063 471.322 li
@
421.739 469.322 mo
421.739 471.322 li
f
421.739 469.322 mo
421.739 471.322 li
@
431.571 469.322 mo
431.571 471.322 li
f
431.571 469.322 mo
431.571 471.322 li
@
439.604 469.322 mo
439.604 471.322 li
f
439.604 469.322 mo
439.604 471.322 li
@
446.396 469.322 mo
446.396 471.322 li
f
446.396 469.322 mo
446.396 471.322 li
@
452.28 469.322 mo
452.28 471.322 li
f
452.28 469.322 mo
452.28 471.322 li
@
457.47 469.322 mo
457.47 471.322 li
f
457.47 469.322 mo
457.47 471.322 li
@
492.653 469.322 mo
492.653 471.322 li
f
492.653 469.322 mo
492.653 471.322 li
@
510.518 469.322 mo
510.518 471.322 li
f
510.518 469.322 mo
510.518 471.322 li
@
523.194 469.322 mo
523.194 471.322 li
f
523.194 469.322 mo
523.194 471.322 li
@
533.026 469.322 mo
533.026 471.322 li
f
533.026 469.322 mo
533.026 471.322 li
@
541.059 469.322 mo
541.059 471.322 li
f
541.059 469.322 mo
541.059 471.322 li
@
547.851 469.322 mo
547.851 471.322 li
f
547.851 469.322 mo
547.851 471.322 li
@
553.734 469.322 mo
553.734 471.322 li
f
553.734 469.322 mo
553.734 471.322 li
@
558.924 469.322 mo
558.924 471.322 li
f
558.924 469.322 mo
558.924 471.322 li
@
200.419 492.388 mo
200.419 493.636 li
200.021 493.267 199.593 492.986 199.142 492.804 cv
198.69 492.622 198.216 492.529 197.706 492.529 cv
196.704 492.529 195.942 492.833 195.409 493.449 cv
194.876 494.058 194.612 494.943 194.612 496.097 cv
194.612 497.251 194.876 498.13 195.409 498.745 cv
195.942 499.355 196.704 499.659 197.706 499.659 cv
198.216 499.659 198.69 499.566 199.142 499.384 cv
199.593 499.202 200.021 498.921 200.419 498.552 cv
200.419 499.788 li
200.003 500.07 199.564 500.281 199.101 500.421 cv
198.638 500.562 198.151 500.632 197.636 500.632 cv
196.312 500.632 195.269 500.228 194.507 499.419 cv
193.745 498.605 193.364 497.497 193.364 496.097 cv
193.364 494.691 193.745 493.583 194.507 492.775 cv
195.269 491.96 196.312 491.556 197.636 491.556 cv
198.157 491.556 198.649 491.626 199.112 491.767 cv
199.575 491.902 200.015 492.113 200.419 492.388 cv
ef
204.764 494.655 mo
204.184 494.655 203.727 494.884 203.393 495.335 cv
203.059 495.786 202.889 496.401 202.889 497.186 cv
202.889 497.971 203.053 498.592 203.387 499.044 cv
203.721 499.495 204.184 499.717 204.764 499.717 cv
205.338 499.717 205.795 499.489 206.129 499.038 cv
206.463 498.587 206.633 497.966 206.633 497.186 cv
206.633 496.407 206.463 495.792 206.129 495.341 cv
205.795 494.884 205.338 494.655 204.764 494.655 cv
204.764 493.741 mo
205.702 493.741 206.44 494.046 206.973 494.655 cv
207.506 495.264 207.776 496.108 207.776 497.186 cv
207.776 498.259 207.506 499.102 206.973 499.717 cv
206.44 500.327 205.702 500.632 204.764 500.632 cv
203.821 500.632 203.082 500.327 202.549 499.717 cv
202.016 499.102 201.752 498.259 201.752 497.186 cv
201.752 496.108 202.016 495.264 202.549 494.655 cv
203.082 494.046 203.821 493.741 204.764 493.741 cv
ef
214.65 495.159 mo
214.92 494.673 215.242 494.315 215.617 494.087 cv
215.992 493.858 216.431 493.741 216.941 493.741 cv
217.627 493.741 218.154 493.981 218.523 494.462 cv
218.892 494.936 219.08 495.616 219.08 496.501 cv
219.08 500.462 li
217.996 500.462 li
217.996 496.536 li
217.996 495.909 217.884 495.44 217.662 495.136 cv
217.439 494.831 217.099 494.679 216.642 494.679 cv
216.086 494.679 215.64 494.866 215.318 495.235 cv
214.996 495.604 214.832 496.114 214.832 496.753 cv
214.832 500.462 li
213.748 500.462 li
213.748 496.536 li
213.748 495.903 213.636 495.434 213.414 495.136 cv
213.191 494.831 212.845 494.679 212.382 494.679 cv
211.832 494.679 211.392 494.866 211.07 495.241 cv
210.748 495.61 210.584 496.114 210.584 496.753 cv
210.584 500.462 li
209.5 500.462 li
209.5 493.899 li
210.584 493.899 li
210.584 494.919 li
210.83 494.514 211.123 494.221 211.468 494.028 cv
211.814 493.835 212.218 493.741 212.693 493.741 cv
213.168 493.741 213.572 493.864 213.906 494.104 cv
214.24 494.345 214.492 494.696 214.65 495.159 cv
ef
226.29 495.159 mo
226.56 494.673 226.882 494.315 227.257 494.087 cv
227.632 493.858 228.071 493.741 228.581 493.741 cv
229.267 493.741 229.794 493.981 230.163 494.462 cv
230.532 494.936 230.72 495.616 230.72 496.501 cv
230.72 500.462 li
229.636 500.462 li
229.636 496.536 li
229.636 495.909 229.524 495.44 229.302 495.136 cv
229.079 494.831 228.739 494.679 228.282 494.679 cv
227.726 494.679 227.28 494.866 226.958 495.235 cv
226.636 495.604 226.472 496.114 226.472 496.753 cv
226.472 500.462 li
225.388 500.462 li
225.388 496.536 li
225.388 495.903 225.276 495.434 225.054 495.136 cv
224.831 494.831 224.485 494.679 224.022 494.679 cv
223.472 494.679 223.032 494.866 222.71 495.241 cv
222.388 495.61 222.224 496.114 222.224 496.753 cv
222.224 500.462 li
221.14 500.462 li
221.14 493.899 li
222.224 493.899 li
222.224 494.919 li
222.47 494.514 222.763 494.221 223.108 494.028 cv
223.454 493.835 223.858 493.741 224.333 493.741 cv
224.808 493.741 225.212 493.864 225.546 494.104 cv
225.88 494.345 226.132 494.696 226.29 495.159 cv
ef
235.923 497.163 mo
235.05 497.163 234.446 497.263 234.112 497.462 cv
233.778 497.661 233.609 498.001 233.609 498.481 cv
233.609 498.862 233.732 499.167 233.984 499.395 cv
234.236 499.618 234.581 499.729 235.015 499.729 cv
235.612 499.729 236.093 499.518 236.45 499.097 cv
236.814 498.669 236.995 498.106 236.995 497.403 cv
236.995 497.163 li
235.923 497.163 li
238.073 496.718 mo
238.073 500.462 li
236.995 500.462 li
236.995 499.466 li
236.749 499.864 236.444 500.157 236.075 500.35 cv
235.706 500.538 235.261 500.632 234.728 500.632 cv
234.054 500.632 233.521 500.444 233.122 500.069 cv
232.73 499.688 232.53 499.184 232.53 498.552 cv
232.53 497.813 232.777 497.257 233.269 496.882 cv
233.767 496.507 234.505 496.319 235.484 496.319 cv
236.995 496.319 li
236.995 496.214 li
236.995 495.716 236.831 495.335 236.503 495.065 cv
236.181 494.79 235.724 494.655 235.132 494.655 cv
234.757 494.655 234.394 494.702 234.036 494.79 cv
233.679 494.878 233.339 495.013 233.011 495.194 cv
233.011 494.198 li
233.403 494.046 233.79 493.934 234.159 493.858 cv
234.528 493.782 234.892 493.741 235.243 493.741 cv
236.193 493.741 236.902 493.987 237.37 494.479 cv
237.839 494.972 238.073 495.716 238.073 496.718 cv
ef
245.716 496.501 mo
245.716 500.462 li
244.638 500.462 li
244.638 496.536 li
244.638 495.915 244.515 495.452 244.275 495.142 cv
244.034 494.831 243.671 494.679 243.185 494.679 cv
242.605 494.679 242.142 494.866 241.808 495.235 cv
241.474 495.605 241.304 496.114 241.304 496.753 cv
241.304 500.462 li
240.22 500.462 li
240.22 493.899 li
241.304 493.899 li
241.304 494.919 li
241.562 494.526 241.866 494.228 242.212 494.034 cv
242.564 493.841 242.968 493.741 243.425 493.741 cv
244.181 493.741 244.749 493.976 245.136 494.444 cv
245.523 494.907 245.716 495.593 245.716 496.501 cv
ef
252.139 494.896 mo
252.139 491.345 li
253.217 491.345 li
253.217 500.462 li
252.139 500.462 li
252.139 499.478 li
251.91 499.871 251.623 500.158 251.278 500.351 cv
250.932 500.539 250.522 500.632 250.035 500.632 cv
249.244 500.632 248.594 500.316 248.096 499.683 cv
247.598 499.05 247.352 498.218 247.352 497.187 cv
247.352 496.156 247.598 495.324 248.096 494.691 cv
248.594 494.058 249.244 493.742 250.035 493.742 cv
250.522 493.742 250.932 493.835 251.278 494.029 cv
251.623 494.216 251.91 494.503 252.139 494.896 cv
248.465 497.187 mo
248.465 497.978 248.629 498.605 248.952 499.056 cv
249.28 499.507 249.731 499.73 250.299 499.73 cv
250.868 499.73 251.319 499.507 251.647 499.056 cv
251.975 498.605 252.139 497.978 252.139 497.187 cv
252.139 496.396 251.975 495.775 251.647 495.324 cv
251.319 494.873 250.868 494.644 250.299 494.644 cv
249.731 494.644 249.28 494.873 248.952 495.324 cv
248.629 495.775 248.465 496.396 248.465 497.187 cv
ef
259.268 491.714 mo
264.799 491.714 li
264.799 492.71 li
260.452 492.71 li
260.452 495.3 li
264.618 495.3 li
264.618 496.296 li
260.452 496.296 li
260.452 499.466 li
264.905 499.466 li
264.905 500.462 li
259.268 500.462 li
259.268 491.714 li
ef
272.356 493.9 mo
269.983 497.093 li
272.479 500.462 li
271.208 500.462 li
269.297 497.884 li
267.387 500.462 li
266.116 500.462 li
268.665 497.029 li
266.333 493.9 li
267.604 493.9 li
269.344 496.238 li
271.085 493.9 li
272.356 493.9 li
ef
279.234 496.911 mo
279.234 497.438 li
274.277 497.438 li
274.324 498.182 274.547 498.745 274.945 499.138 cv
275.349 499.524 275.906 499.718 276.621 499.718 cv
277.037 499.718 277.435 499.665 277.822 499.565 cv
278.214 499.466 278.601 499.313 278.982 499.108 cv
278.982 500.128 li
278.595 500.292 278.197 500.415 277.793 500.503 cv
277.388 500.591 276.972 500.632 276.556 500.632 cv
275.507 500.632 274.681 500.327 274.066 499.718 cv
273.457 499.108 273.152 498.282 273.152 497.245 cv
273.152 496.173 273.439 495.317 274.019 494.69 cv
274.599 494.057 275.384 493.741 276.369 493.741 cv
277.254 493.741 277.951 494.028 278.461 494.597 cv
278.976 495.165 279.234 495.932 279.234 496.911 cv
278.156 496.595 mo
278.15 496.003 277.98 495.534 277.658 495.182 cv
277.336 494.831 276.914 494.655 276.38 494.655 cv
275.777 494.655 275.297 494.825 274.933 495.165 cv
274.576 495.505 274.365 495.985 274.312 496.6 cv
278.156 496.595 li
ef
285.664 494.151 mo
285.664 495.159 li
285.359 494.989 285.055 494.866 284.744 494.784 cv
284.439 494.696 284.129 494.655 283.818 494.655 cv
283.121 494.655 282.576 494.878 282.189 495.323 cv
281.803 495.762 281.609 496.383 281.609 497.186 cv
281.609 497.989 281.803 498.61 282.189 499.055 cv
282.576 499.495 283.121 499.717 283.818 499.717 cv
284.129 499.717 284.439 499.676 284.744 499.594 cv
285.055 499.506 285.359 499.383 285.664 499.213 cv
285.664 500.21 li
285.365 500.35 285.049 500.456 284.727 500.526 cv
284.404 500.596 284.064 500.631 283.701 500.631 cv
282.711 500.631 281.926 500.321 281.346 499.7 cv
280.766 499.079 280.473 498.241 280.473 497.186 cv
280.473 496.114 280.766 495.276 281.352 494.661 cv
281.943 494.046 282.746 493.741 283.771 493.741 cv
284.105 493.741 284.428 493.776 284.744 493.846 cv
285.06 493.911 285.365 494.016 285.664 494.151 cv
ef
287.43 497.872 mo
287.43 493.899 li
288.508 493.899 li
288.508 497.831 li
288.508 498.452 288.631 498.921 288.871 499.231 cv
289.112 499.542 289.475 499.694 289.961 499.694 cv
290.541 499.694 291.004 499.507 291.338 499.138 cv
291.678 498.768 291.848 498.259 291.848 497.62 cv
291.848 493.899 li
292.926 493.899 li
292.926 500.462 li
291.848 500.462 li
291.848 499.454 li
291.584 499.852 291.28 500.151 290.934 500.345 cv
290.588 500.538 290.19 500.632 289.733 500.632 cv
288.977 500.632 288.409 500.397 288.016 499.929 cv
287.623 499.46 287.43 498.774 287.43 497.872 cv
290.143 493.741 mo
290.143 493.741 li
ef
296.287 492.036 mo
296.287 493.899 li
298.508 493.899 li
298.508 494.737 li
296.287 494.737 li
296.287 498.3 li
296.287 498.833 296.357 499.179 296.504 499.331 cv
296.65 499.483 296.949 499.559 297.4 499.559 cv
298.508 499.559 li
298.508 500.462 li
297.4 500.462 li
296.568 500.462 295.994 500.309 295.678 499.999 cv
295.361 499.688 295.203 499.12 295.203 498.3 cv
295.203 494.737 li
294.412 494.737 li
294.412 493.899 li
295.203 493.899 li
295.203 492.036 li
296.287 492.036 li
ef
299.901 493.9 mo
300.979 493.9 li
300.979 500.462 li
299.901 500.462 li
299.901 493.9 li
299.901 491.345 mo
299.901 491.345 mo
300.979 491.345 li
300.979 492.71 li
299.901 492.71 li
cp
ef
305.804 494.655 mo
305.224 494.655 304.767 494.884 304.433 495.335 cv
304.099 495.786 303.929 496.401 303.929 497.186 cv
303.929 497.971 304.093 498.592 304.427 499.044 cv
304.761 499.495 305.224 499.717 305.804 499.717 cv
306.378 499.717 306.835 499.489 307.169 499.038 cv
307.503 498.587 307.673 497.966 307.673 497.186 cv
307.673 496.407 307.503 495.792 307.169 495.341 cv
306.835 494.884 306.378 494.655 305.804 494.655 cv
305.804 493.741 mo
306.742 493.741 307.48 494.046 308.013 494.655 cv
308.546 495.264 308.816 496.108 308.816 497.186 cv
308.816 498.259 308.546 499.102 308.013 499.717 cv
307.48 500.327 306.742 500.632 305.804 500.632 cv
304.861 500.632 304.122 500.327 303.589 499.717 cv
303.056 499.102 302.792 498.259 302.792 497.186 cv
302.792 496.108 303.056 495.264 303.589 494.655 cv
304.122 494.046 304.861 493.741 305.804 493.741 cv
ef
316.036 496.501 mo
316.036 500.462 li
314.958 500.462 li
314.958 496.536 li
314.958 495.915 314.835 495.452 314.595 495.142 cv
314.354 494.831 313.991 494.679 313.505 494.679 cv
312.925 494.679 312.462 494.866 312.128 495.235 cv
311.794 495.605 311.624 496.114 311.624 496.753 cv
311.624 500.462 li
310.54 500.462 li
310.54 493.899 li
311.624 493.899 li
311.624 494.919 li
311.882 494.526 312.186 494.228 312.532 494.034 cv
312.884 493.841 313.288 493.741 313.745 493.741 cv
314.501 493.741 315.069 493.976 315.456 494.444 cv
315.843 494.907 316.036 495.593 316.036 496.501 cv
ef
328.579 492.388 mo
328.579 493.636 li
328.181 493.267 327.753 492.986 327.302 492.804 cv
326.85 492.622 326.376 492.529 325.866 492.529 cv
324.864 492.529 324.102 492.833 323.569 493.449 cv
323.036 494.058 322.772 494.943 322.772 496.097 cv
322.772 497.251 323.036 498.13 323.569 498.745 cv
324.102 499.355 324.864 499.659 325.866 499.659 cv
326.376 499.659 326.85 499.566 327.302 499.384 cv
327.753 499.202 328.181 498.921 328.579 498.552 cv
328.579 499.788 li
328.163 500.07 327.724 500.281 327.261 500.421 cv
326.798 500.562 326.311 500.632 325.796 500.632 cv
324.472 500.632 323.429 500.228 322.667 499.419 cv
321.905 498.605 321.524 497.497 321.524 496.097 cv
321.524 494.691 321.905 493.583 322.667 492.775 cv
323.429 491.96 324.472 491.556 325.796 491.556 cv
326.317 491.556 326.809 491.626 327.272 491.767 cv
327.735 491.902 328.175 492.113 328.579 492.388 cv
ef
332.924 494.655 mo
332.344 494.655 331.887 494.884 331.553 495.335 cv
331.219 495.786 331.049 496.401 331.049 497.186 cv
331.049 497.971 331.213 498.592 331.547 499.044 cv
331.881 499.495 332.344 499.717 332.924 499.717 cv
333.498 499.717 333.955 499.489 334.289 499.038 cv
334.623 498.587 334.793 497.966 334.793 497.186 cv
334.793 496.407 334.623 495.792 334.289 495.341 cv
333.955 494.884 333.498 494.655 332.924 494.655 cv
332.924 493.741 mo
333.862 493.741 334.6 494.046 335.133 494.655 cv
335.666 495.264 335.936 496.108 335.936 497.186 cv
335.936 498.259 335.666 499.102 335.133 499.717 cv
334.6 500.327 333.862 500.632 332.924 500.632 cv
331.981 500.632 331.242 500.327 330.709 499.717 cv
330.176 499.102 329.912 498.259 329.912 497.186 cv
329.912 496.108 330.176 495.264 330.709 494.655 cv
331.242 494.046 331.981 493.741 332.924 493.741 cv
ef
337.59 497.872 mo
337.59 493.899 li
338.668 493.899 li
338.668 497.831 li
338.668 498.452 338.791 498.921 339.031 499.231 cv
339.272 499.542 339.635 499.694 340.121 499.694 cv
340.701 499.694 341.164 499.507 341.498 499.138 cv
341.838 498.768 342.008 498.259 342.008 497.62 cv
342.008 493.899 li
343.086 493.899 li
343.086 500.462 li
342.008 500.462 li
342.008 499.454 li
341.744 499.852 341.44 500.151 341.094 500.345 cv
340.748 500.538 340.35 500.632 339.893 500.632 cv
339.137 500.632 338.569 500.397 338.176 499.929 cv
337.783 499.46 337.59 498.774 337.59 497.872 cv
340.303 493.741 mo
340.303 493.741 li
ef
350.716 496.501 mo
350.716 500.462 li
349.638 500.462 li
349.638 496.536 li
349.638 495.915 349.515 495.452 349.275 495.142 cv
349.034 494.831 348.671 494.679 348.185 494.679 cv
347.605 494.679 347.142 494.866 346.808 495.235 cv
346.474 495.605 346.304 496.114 346.304 496.753 cv
346.304 500.462 li
345.22 500.462 li
345.22 493.899 li
346.304 493.899 li
346.304 494.919 li
346.562 494.526 346.866 494.228 347.212 494.034 cv
347.564 493.841 347.968 493.741 348.425 493.741 cv
349.181 493.741 349.749 493.976 350.136 494.444 cv
350.523 494.907 350.716 495.593 350.716 496.501 cv
ef
354.007 492.036 mo
354.007 493.899 li
356.228 493.899 li
356.228 494.737 li
354.007 494.737 li
354.007 498.3 li
354.007 498.833 354.077 499.179 354.224 499.331 cv
354.37 499.483 354.669 499.559 355.12 499.559 cv
356.228 499.559 li
356.228 500.462 li
355.12 500.462 li
354.288 500.462 353.714 500.309 353.398 499.999 cv
353.081 499.688 352.923 499.12 352.923 498.3 cv
352.923 494.737 li
352.132 494.737 li
352.132 493.899 li
352.923 493.899 li
352.923 492.036 li
354.007 492.036 li
ef
364.051 491.357 mo
363.53 492.253 363.137 493.144 362.885 494.023 cv
362.633 494.902 362.504 495.793 362.504 496.695 cv
362.504 497.597 362.633 498.494 362.885 499.378 cv
363.143 500.263 363.53 501.148 364.051 502.044 cv
363.114 502.044 li
362.528 501.125 362.088 500.222 361.795 499.337 cv
361.508 498.453 361.362 497.568 361.362 496.695 cv
361.362 495.822 361.508 494.949 361.795 494.064 cv
362.082 493.179 362.522 492.277 363.114 491.357 cv
364.051 491.357 li
ef
366.188 491.714 mo
367.372 491.714 li
367.372 499.466 li
371.631 499.466 li
371.631 500.462 li
366.188 500.462 li
366.188 491.714 li
ef
375.044 494.655 mo
374.464 494.655 374.007 494.884 373.673 495.335 cv
373.339 495.786 373.169 496.401 373.169 497.186 cv
373.169 497.971 373.333 498.592 373.667 499.044 cv
374.001 499.495 374.464 499.717 375.044 499.717 cv
375.618 499.717 376.075 499.489 376.409 499.038 cv
376.743 498.587 376.913 497.966 376.913 497.186 cv
376.913 496.407 376.743 495.792 376.409 495.341 cv
376.075 494.884 375.618 494.655 375.044 494.655 cv
375.044 493.741 mo
375.982 493.741 376.72 494.046 377.253 494.655 cv
377.786 495.264 378.056 496.108 378.056 497.186 cv
378.056 498.259 377.786 499.102 377.253 499.717 cv
376.72 500.327 375.982 500.632 375.044 500.632 cv
374.101 500.632 373.362 500.327 372.829 499.717 cv
372.296 499.102 372.032 498.259 372.032 497.186 cv
372.032 496.108 372.296 495.264 372.829 494.655 cv
373.362 494.046 374.101 493.741 375.044 493.741 cv
ef
384.259 497.105 mo
384.259 496.326 384.095 495.716 383.773 495.289 cv
383.45 494.861 382.999 494.644 382.419 494.644 cv
381.839 494.644 381.388 494.861 381.066 495.289 cv
380.743 495.716 380.585 496.326 380.585 497.105 cv
380.585 497.884 380.743 498.488 381.066 498.916 cv
381.388 499.343 381.839 499.56 382.419 499.56 cv
382.999 499.56 383.45 499.343 383.773 498.916 cv
384.095 498.488 384.259 497.884 384.259 497.105 cv
385.337 499.648 mo
385.337 500.767 385.091 501.593 384.593 502.138 cv
384.095 502.683 383.339 502.959 382.314 502.959 cv
381.933 502.959 381.575 502.929 381.241 502.871 cv
380.907 502.818 380.579 502.73 380.263 502.613 cv
380.263 501.564 li
380.579 501.734 380.89 501.863 381.2 501.945 cv
381.511 502.027 381.822 502.068 382.144 502.068 cv
382.853 502.068 383.38 501.88 383.732 501.511 cv
384.083 501.142 384.259 500.585 384.259 499.841 cv
384.259 499.308 li
384.036 499.695 383.749 499.982 383.404 500.175 cv
383.058 500.369 382.642 500.462 382.155 500.462 cv
381.353 500.462 380.702 500.158 380.21 499.542 cv
379.718 498.927 379.472 498.119 379.472 497.105 cv
379.472 496.091 379.718 495.277 380.21 494.662 cv
380.702 494.046 381.353 493.742 382.155 493.742 cv
382.642 493.742 383.058 493.835 383.404 494.029 cv
383.749 494.222 384.036 494.509 384.259 494.896 cv
384.259 493.9 li
385.337 493.9 li
385.337 499.648 li
ef
396.632 492.001 mo
396.632 493.155 li
396.181 492.938 395.759 492.78 395.361 492.675 cv
394.962 492.569 394.575 492.517 394.206 492.517 cv
393.562 492.517 393.064 492.64 392.712 492.892 cv
392.366 493.144 392.191 493.495 392.191 493.958 cv
392.191 494.345 392.308 494.638 392.536 494.837 cv
392.771 495.03 393.21 495.188 393.861 495.312 cv
394.575 495.458 li
395.46 495.628 396.111 495.921 396.527 496.349 cv
396.948 496.771 397.159 497.339 397.159 498.048 cv
397.159 498.897 396.872 499.536 396.304 499.976 cv
395.736 500.415 394.903 500.632 393.808 500.632 cv
393.392 500.632 392.952 500.585 392.484 500.491 cv
392.021 500.397 391.534 500.257 391.036 500.075 cv
391.036 498.856 li
391.517 499.126 391.986 499.331 392.448 499.466 cv
392.911 499.601 393.362 499.671 393.808 499.671 cv
394.482 499.671 395.003 499.536 395.372 499.272 cv
395.741 499.009 395.923 498.628 395.923 498.136 cv
395.923 497.708 395.788 497.368 395.525 497.128 cv
395.261 496.888 394.833 496.706 394.23 496.583 cv
393.509 496.442 li
392.624 496.267 391.986 495.991 391.593 495.616 cv
391.2 495.241 391.001 494.72 391.001 494.052 cv
391.001 493.278 391.271 492.669 391.816 492.224 cv
392.361 491.778 393.116 491.556 394.071 491.556 cv
394.482 491.556 394.898 491.591 395.325 491.667 cv
395.753 491.743 396.187 491.855 396.632 492.001 cv
ef
403.624 494.151 mo
403.624 495.159 li
403.319 494.989 403.015 494.866 402.704 494.784 cv
402.399 494.696 402.089 494.655 401.778 494.655 cv
401.081 494.655 400.536 494.878 400.149 495.323 cv
399.763 495.762 399.569 496.383 399.569 497.186 cv
399.569 497.989 399.763 498.61 400.149 499.055 cv
400.536 499.495 401.081 499.717 401.778 499.717 cv
402.089 499.717 402.399 499.676 402.704 499.594 cv
403.015 499.506 403.319 499.383 403.624 499.213 cv
403.624 500.21 li
403.325 500.35 403.009 500.456 402.687 500.526 cv
402.364 500.596 402.024 500.631 401.661 500.631 cv
400.671 500.631 399.886 500.321 399.306 499.7 cv
398.726 499.079 398.433 498.241 398.433 497.186 cv
398.433 496.114 398.726 495.276 399.312 494.661 cv
399.903 494.046 400.706 493.741 401.731 493.741 cv
402.065 493.741 402.388 493.776 402.704 493.846 cv
403.02 493.911 403.325 494.016 403.624 494.151 cv
ef
408.483 497.163 mo
407.61 497.163 407.006 497.263 406.672 497.462 cv
406.338 497.661 406.169 498.001 406.169 498.481 cv
406.169 498.862 406.292 499.167 406.544 499.395 cv
406.796 499.618 407.141 499.729 407.575 499.729 cv
408.172 499.729 408.653 499.518 409.01 499.097 cv
409.374 498.669 409.555 498.106 409.555 497.403 cv
409.555 497.163 li
408.483 497.163 li
410.633 496.718 mo
410.633 500.462 li
409.555 500.462 li
409.555 499.466 li
409.309 499.864 409.004 500.157 408.635 500.35 cv
408.266 500.538 407.821 500.632 407.288 500.632 cv
406.614 500.632 406.081 500.444 405.682 500.069 cv
405.29 499.688 405.09 499.184 405.09 498.552 cv
405.09 497.813 405.337 497.257 405.829 496.882 cv
406.327 496.507 407.065 496.319 408.044 496.319 cv
409.555 496.319 li
409.555 496.214 li
409.555 495.716 409.391 495.335 409.063 495.065 cv
408.741 494.79 408.284 494.655 407.692 494.655 cv
407.317 494.655 406.954 494.702 406.596 494.79 cv
406.239 494.878 405.899 495.013 405.571 495.194 cv
405.571 494.198 li
405.963 494.046 406.35 493.934 406.719 493.858 cv
407.088 493.782 407.452 493.741 407.803 493.741 cv
408.753 493.741 409.462 493.987 409.93 494.479 cv
410.399 494.972 410.633 495.716 410.633 496.718 cv
ef
412.941 500.462 mo
414.019 500.462 li
414.019 491.345 li
412.941 491.345 li
cp
f
421.794 496.911 mo
421.794 497.438 li
416.837 497.438 li
416.884 498.182 417.107 498.745 417.505 499.138 cv
417.909 499.524 418.466 499.718 419.181 499.718 cv
419.597 499.718 419.995 499.665 420.382 499.565 cv
420.774 499.466 421.161 499.313 421.542 499.108 cv
421.542 500.128 li
421.155 500.292 420.757 500.415 420.353 500.503 cv
419.948 500.591 419.532 500.632 419.116 500.632 cv
418.067 500.632 417.241 500.327 416.626 499.718 cv
416.017 499.108 415.712 498.282 415.712 497.245 cv
415.712 496.173 415.999 495.317 416.579 494.69 cv
417.159 494.057 417.944 493.741 418.929 493.741 cv
419.814 493.741 420.511 494.028 421.021 494.597 cv
421.536 495.165 421.794 495.932 421.794 496.911 cv
420.716 496.595 mo
420.71 496.003 420.54 495.534 420.218 495.182 cv
419.896 494.831 419.474 494.655 418.94 494.655 cv
418.337 494.655 417.857 494.825 417.493 495.165 cv
417.136 495.505 416.925 495.985 416.872 496.6 cv
420.716 496.595 li
ef
423.451 491.357 mo
424.389 491.357 li
424.974 492.277 425.414 493.179 425.701 494.064 cv
425.994 494.949 426.14 495.822 426.14 496.695 cv
426.14 497.568 425.994 498.453 425.701 499.337 cv
425.414 500.222 424.974 501.125 424.389 502.044 cv
423.451 502.044 li
423.972 501.148 424.359 500.263 424.611 499.378 cv
424.869 498.494 424.998 497.597 424.998 496.695 cv
424.998 495.793 424.869 494.902 424.611 494.023 cv
424.359 493.144 423.972 492.253 423.451 491.357 cv
ef
gsave
30.9296 469.322 mo
588.93 469.322 li
588.93 25.8017 li
30.9296 25.8017 li
cp
clp
.8 lw
2 lc
30.9296 468.576 mo
588.93 468.576 li
1 /0 /CSD get_res sepcs
.31 sep
@
grestore
30.9296 468.576 mo
27.4296 468.576 li
f
.8 lw
30.9296 468.576 mo
27.4296 468.576 li
@
21.6676 468.451 mo
22.1416 468.554 22.5076 468.763 22.7716 469.081 cv
23.0396 469.398 23.1716 469.794 23.1716 470.263 cv
23.1716 470.98 22.9226 471.537 22.4296 471.932 cv
21.9366 472.328 21.2326 472.523 20.3196 472.523 cv
20.0126 472.523 19.6996 472.494 19.3726 472.43 cv
19.0506 472.372 18.7186 472.284 18.3716 472.162 cv
18.3716 471.21 li
18.6456 471.371 18.9426 471.488 19.2706 471.571 cv
19.5976 471.654 19.9346 471.693 20.2906 471.693 cv
20.9106 471.693 21.3796 471.571 21.7016 471.327 cv
22.0286 471.083 22.1896 470.726 22.1896 470.263 cv
22.1896 469.833 22.0386 469.496 21.7356 469.257 cv
21.4386 469.013 21.0186 468.89 20.4806 468.89 cv
19.6316 468.89 li
19.6316 468.08 li
20.5206 468.08 li
21.0036 468.08 21.3746 467.982 21.6336 467.792 cv
21.8926 467.597 22.0196 467.318 22.0196 466.952 cv
22.0196 466.576 21.8876 466.293 21.6186 466.093 cv
21.3556 465.892 20.9746 465.79 20.4806 465.79 cv
20.2126 465.79 19.9196 465.819 19.6116 465.878 cv
19.3046 465.936 18.9626 466.029 18.5916 466.151 cv
18.5916 465.272 li
18.9676 465.17 19.3136 465.092 19.6416 465.038 cv
19.9686 464.984 20.2806 464.96 20.5686 464.96 cv
21.3156 464.96 21.9116 465.131 22.3466 465.472 cv
22.7806 465.809 23.0006 466.268 23.0006 466.849 cv
23.0006 467.255 22.8836 467.597 22.6536 467.875 cv
22.4246 468.153 22.0926 468.344 21.6676 468.451 cv
ef
gsave
30.9296 469.322 mo
588.93 469.322 li
588.93 25.8017 li
30.9296 25.8017 li
cp
clp
2 lc
30.9296 399.071 mo
588.93 399.071 li
1 /0 /CSD get_res sepcs
.31 sep
@
grestore
30.9296 399.071 mo
27.4296 399.071 li
f
30.9296 399.071 mo
27.4296 399.071 li
@
21.3886 396.471 mo
18.8986 400.363 li
21.3886 400.363 li
21.3886 396.471 li
21.1296 395.612 mo
22.3696 395.612 li
22.3696 400.363 li
23.4096 400.363 li
23.4096 401.183 li
22.3696 401.183 li
22.3696 402.902 li
21.3886 402.902 li
21.3886 401.183 li
18.0976 401.183 li
18.0976 400.231 li
21.1296 395.612 li
ef
gsave
30.9296 469.322 mo
588.93 469.322 li
588.93 25.8017 li
30.9296 25.8017 li
cp
clp
2 lc
30.9296 329.567 mo
588.93 329.567 li
1 /0 /CSD get_res sepcs
.31 sep
@
grestore
30.9296 329.567 mo
27.4296 329.567 li
f
30.9296 329.567 mo
27.4296 329.567 li
@
18.6886 326.132 mo
22.5606 326.132 li
22.5606 326.962 li
19.5916 326.962 li
19.5916 328.749 li
19.7336 328.7 19.8796 328.666 20.0216 328.642 cv
20.1636 328.617 20.3096 328.603 20.4516 328.603 cv
21.2666 328.603 21.9116 328.827 22.3846 329.272 cv
22.8586 329.716 23.0976 330.321 23.0976 331.083 cv
23.0976 331.869 22.8536 332.48 22.3656 332.914 cv
21.8766 333.349 21.1886 333.564 20.2996 333.564 cv
19.9926 333.564 19.6796 333.539 19.3626 333.486 cv
19.0446 333.432 18.7176 333.354 18.3806 333.251 cv
18.3806 332.26 li
18.6736 332.421 18.9766 332.538 19.2896 332.616 cv
19.6016 332.694 19.9336 332.734 20.2806 332.734 cv
20.8416 332.734 21.2916 332.587 21.6186 332.289 cv
21.9456 331.991 22.1116 331.591 22.1116 331.083 cv
22.1116 330.575 21.9456 330.175 21.6186 329.877 cv
21.2916 329.579 20.8416 329.433 20.2806 329.433 cv
20.0166 329.433 19.7526 329.462 19.4896 329.521 cv
19.2306 329.579 18.9616 329.672 18.6886 329.794 cv
18.6886 326.132 li
ef
gsave
30.9296 469.322 mo
588.93 469.322 li
588.93 25.8017 li
30.9296 25.8017 li
cp
clp
2 lc
30.9296 260.062 mo
588.93 260.062 li
1 /0 /CSD get_res sepcs
.31 sep
@
grestore
30.9296 260.062 mo
27.4296 260.062 li
f
30.9296 260.062 mo
27.4296 260.062 li
@
20.9106 259.784 mo
20.4666 259.784 20.1146 259.935 19.8556 260.238 cv
19.5976 260.541 19.4706 260.956 19.4706 261.483 cv
19.4706 262.006 19.5976 262.421 19.8556 262.728 cv
20.1146 263.031 20.4666 263.182 20.9106 263.182 cv
21.3546 263.182 21.7016 263.031 21.9606 262.728 cv
22.2196 262.421 22.3506 262.006 22.3506 261.483 cv
22.3506 260.956 22.2196 260.541 21.9606 260.238 cv
21.7016 259.935 21.3546 259.784 20.9106 259.784 cv
22.8686 256.693 mo
22.8686 257.592 li
22.6196 257.474 22.3706 257.387 22.1166 257.323 cv
21.8676 257.26 21.6186 257.23 21.3696 257.23 cv
20.7206 257.23 20.2226 257.45 19.8756 257.889 cv
19.5336 258.329 19.3386 258.993 19.2896 259.882 cv
19.4796 259.598 19.7236 259.384 20.0126 259.232 cv
20.3006 259.081 20.6226 259.003 20.9696 259.003 cv
21.7016 259.003 22.2776 259.227 22.7026 259.672 cv
23.1276 260.116 23.3426 260.717 23.3426 261.483 cv
23.3426 262.23 23.1226 262.831 22.6786 263.285 cv
22.2336 263.739 21.6476 263.964 20.9106 263.964 cv
20.0656 263.964 19.4216 263.641 18.9766 262.997 cv
18.5326 262.347 18.3076 261.41 18.3076 260.184 cv
18.3076 259.032 18.5816 258.114 19.1286 257.43 cv
19.6756 256.742 20.4076 256.4 21.3306 256.4 cv
21.5796 256.4 21.8286 256.425 22.0776 256.473 cv
22.3316 256.522 22.5956 256.596 22.8686 256.693 cv
ef
gsave
30.9296 469.322 mo
588.93 469.322 li
588.93 25.8017 li
30.9296 25.8017 li
cp
clp
2 lc
30.9296 190.557 mo
588.93 190.557 li
1 /0 /CSD get_res sepcs
.31 sep
@
grestore
30.9296 190.557 mo
27.4296 190.557 li
f
30.9296 190.557 mo
27.4296 190.557 li
@
18.4296 187.052 mo
23.1176 187.052 li
23.1176 187.472 li
20.4706 194.342 li
19.4406 194.342 li
21.9306 187.882 li
18.4296 187.882 li
18.4296 187.052 li
ef
gsave
30.9296 469.322 mo
588.93 469.322 li
588.93 25.8017 li
30.9296 25.8017 li
cp
clp
2 lc
30.9296 121.053 mo
588.93 121.053 li
1 /0 /CSD get_res sepcs
.31 sep
@
grestore
30.9296 121.053 mo
27.4296 121.053 li
f
30.9296 121.053 mo
27.4296 121.053 li
@
20.7886 121.4 mo
20.3196 121.4 19.9486 121.527 19.6806 121.776 cv
19.4116 122.025 19.2796 122.372 19.2796 122.811 cv
19.2796 123.251 19.4116 123.597 19.6806 123.846 cv
19.9486 124.095 20.3196 124.222 20.7886 124.222 cv
21.2576 124.222 21.6286 124.095 21.8966 123.846 cv
22.1656 123.592 22.3026 123.246 22.3026 122.811 cv
22.3026 122.372 22.1656 122.025 21.8966 121.776 cv
21.6286 121.527 21.2626 121.4 20.7886 121.4 cv
19.8026 120.98 mo
19.3776 120.878 19.0506 120.677 18.8106 120.389 cv
18.5766 120.101 18.4596 119.745 18.4596 119.33 cv
18.4596 118.749 18.6646 118.285 19.0796 117.948 cv
19.4946 117.611 20.0656 117.44 20.7886 117.44 cv
21.5166 117.44 22.0826 117.611 22.4976 117.948 cv
22.9126 118.285 23.1176 118.749 23.1176 119.33 cv
23.1176 119.745 23.0006 120.101 22.7616 120.389 cv
22.5266 120.677 22.1996 120.878 21.7796 120.98 cv
22.2536 121.092 22.6246 121.307 22.8886 121.629 cv
23.1566 121.952 23.2886 122.347 23.2886 122.811 cv
23.2886 123.519 23.0736 124.061 22.6396 124.437 cv
22.2096 124.813 21.5946 125.004 20.7886 125.004 cv
19.9826 125.004 19.3676 124.813 18.9336 124.437 cv
18.5036 124.061 18.2886 123.519 18.2886 122.811 cv
18.2886 122.347 18.4206 121.952 18.6886 121.629 cv
18.9576 121.307 19.3286 121.092 19.8026 120.98 cv
19.4406 119.422 mo
19.4406 119.798 19.5586 120.096 19.7926 120.306 cv
20.0316 120.516 20.3636 120.624 20.7886 120.624 cv
21.2136 120.624 21.5406 120.516 21.7796 120.306 cv
22.0186 120.096 22.1416 119.798 22.1416 119.422 cv
22.1416 119.046 22.0186 118.749 21.7796 118.539 cv
21.5406 118.329 21.2136 118.221 20.7886 118.221 cv
20.3636 118.221 20.0316 118.329 19.7926 118.539 cv
19.5586 118.749 19.4406 119.046 19.4406 119.422 cv
ef
gsave
30.9296 469.322 mo
588.93 469.322 li
588.93 25.8017 li
30.9296 25.8017 li
cp
clp
2 lc
30.9296 51.5477 mo
588.93 51.5477 li
1 /0 /CSD get_res sepcs
.31 sep
@
grestore
30.9296 51.5477 mo
27.4296 51.5477 li
f
30.9296 51.5477 mo
27.4296 51.5477 li
@
18.7086 55.2307 mo
18.7086 54.3327 li
18.9576 54.4497 19.2066 54.5377 19.4606 54.6007 cv
19.7146 54.6647 19.9636 54.6937 20.2076 54.6937 cv
20.8566 54.6937 21.3546 54.4737 21.6966 54.0397 cv
22.0436 53.5997 22.2386 52.9357 22.2876 52.0427 cv
22.0976 52.3207 21.8576 52.5357 21.5696 52.6867 cv
21.2816 52.8377 20.9596 52.9117 20.6076 52.9117 cv
19.8806 52.9117 19.2996 52.6917 18.8746 52.2517 cv
18.4496 51.8077 18.2396 51.2077 18.2396 50.4407 cv
18.2396 49.6937 18.4596 49.0927 18.9036 48.6387 cv
19.3486 48.1847 19.9346 47.9597 20.6716 47.9597 cv
21.5166 47.9597 22.1556 48.2827 22.6006 48.9317 cv
23.0446 49.5767 23.2696 50.5137 23.2696 51.7447 cv
23.2696 52.8917 22.9956 53.8097 22.4486 54.4987 cv
21.9066 55.1817 21.1746 55.5237 20.2516 55.5237 cv
20.0026 55.5237 19.7536 55.4997 19.4996 55.4507 cv
19.2456 55.4017 18.9816 55.3287 18.7086 55.2307 cv
20.6716 52.1397 mo
21.1156 52.1397 21.4626 51.9887 21.7216 51.6857 cv
21.9796 51.3827 22.1116 50.9677 22.1116 50.4407 cv
22.1116 49.9177 21.9796 49.5027 21.7216 49.2007 cv
21.4626 48.8927 21.1156 48.7417 20.6716 48.7417 cv
20.2276 48.7417 19.8756 48.8927 19.6166 49.2007 cv
19.3576 49.5027 19.2306 49.9177 19.2306 50.4407 cv
19.2306 50.9677 19.3576 51.3827 19.6166 51.6857 cv
19.8756 51.9887 20.2276 52.1397 20.6716 52.1397 cv
ef
2.38157 273.324 mo
2.38157 267.793 li
3.37756 267.793 li
3.37756 272.14 li
5.96757 272.14 li
5.96757 267.974 li
6.96356 267.974 li
6.96356 272.14 li
10.1336 272.14 li
10.1336 267.687 li
11.1296 267.687 li
11.1296 273.324 li
2.38157 273.324 li
ef
5.57456 262.008 mo
5.50456 262.131 5.45156 262.26 5.42256 262.406 cv
5.38757 262.547 5.36956 262.705 5.36956 262.875 cv
5.36956 263.485 5.56857 263.953 5.96756 264.281 cv
6.35957 264.604 6.92856 264.768 7.67256 264.768 cv
11.1296 264.768 li
11.1296 265.852 li
4.56656 265.852 li
4.56656 264.768 li
5.58656 264.768 li
5.18756 264.539 4.89456 264.246 4.70156 263.883 cv
4.50856 263.52 4.40856 263.08 4.40856 262.559 cv
4.40856 262.483 4.41456 262.401 4.42656 262.313 cv
4.43156 262.225 4.44956 262.125 4.46756 262.014 cv
5.57456 262.008 li
ef
5.57456 257.328 mo
5.50456 257.451 5.45156 257.58 5.42256 257.726 cv
5.38757 257.867 5.36956 258.025 5.36956 258.195 cv
5.36956 258.805 5.56857 259.273 5.96756 259.601 cv
6.35957 259.924 6.92856 260.088 7.67256 260.088 cv
11.1296 260.088 li
11.1296 261.172 li
4.56656 261.172 li
4.56656 260.088 li
5.58656 260.088 li
5.18756 259.859 4.89456 259.566 4.70156 259.203 cv
4.50856 258.84 4.40856 258.4 4.40856 257.879 cv
4.40856 257.803 4.41456 257.721 4.42656 257.633 cv
4.43156 257.545 4.44956 257.445 4.46756 257.334 cv
5.57456 257.328 li
ef
5.32256 253.908 mo
5.32256 254.488 5.55156 254.945 6.00256 255.279 cv
6.45356 255.613 7.06857 255.783 7.85356 255.783 cv
8.63857 255.783 9.26057 255.619 9.71156 255.285 cv
10.1626 254.951 10.3856 254.488 10.3856 253.908 cv
10.3856 253.334 10.1566 252.877 9.70557 252.543 cv
9.25456 252.209 8.63356 252.039 7.85356 252.039 cv
7.07456 252.039 6.45956 252.209 6.00856 252.543 cv
5.55156 252.877 5.32256 253.334 5.32256 253.908 cv
4.40856 253.908 mo
4.40856 252.97 4.71356 252.232 5.32256 251.699 cv
5.93156 251.166 6.77557 250.896 7.85356 250.896 cv
8.92656 250.896 9.76956 251.166 10.3856 251.699 cv
10.9946 252.232 11.2996 252.97 11.2996 253.908 cv
11.2996 254.851 10.9946 255.59 10.3856 256.123 cv
9.76956 256.656 8.92656 256.92 7.85356 256.92 cv
6.77557 256.92 5.93156 256.656 5.32256 256.123 cv
4.71356 255.59 4.40856 254.851 4.40856 253.908 cv
ef
5.57456 245.208 mo
5.50456 245.331 5.45156 245.46 5.42256 245.606 cv
5.38757 245.747 5.36956 245.905 5.36956 246.075 cv
5.36956 246.685 5.56857 247.153 5.96756 247.481 cv
6.35957 247.804 6.92856 247.968 7.67256 247.968 cv
11.1296 247.968 li
11.1296 249.052 li
4.56656 249.052 li
4.56656 247.968 li
5.58656 247.968 li
5.18756 247.739 4.89456 247.446 4.70156 247.083 cv
4.50856 246.72 4.40856 246.28 4.40856 245.759 cv
4.40856 245.683 4.41456 245.601 4.42656 245.513 cv
4.43156 245.425 4.44956 245.325 4.46756 245.214 cv
5.57456 245.208 li
ef
2.02457 237.661 mo
2.92057 238.182 3.81157 238.575 4.69057 238.827 cv
5.56956 239.079 6.46056 239.208 7.36256 239.208 cv
8.26456 239.208 9.16157 239.079 10.0456 238.827 cv
10.9306 238.569 11.8156 238.182 12.7126 237.661 cv
12.7126 238.598 li
11.7926 239.184 10.8896 239.624 10.0046 239.917 cv
9.12057 240.204 8.23557 240.35 7.36256 240.35 cv
6.48956 240.35 5.61657 240.204 4.73157 239.917 cv
3.84657 239.63 2.94456 239.19 2.02457 238.598 cv
2.02457 237.661 li
ef
7.27956 227.977 mo
7.27956 228.317 7.42557 228.586 7.71356 228.78 cv
8.00056 228.973 8.40456 229.067 8.92056 229.067 cv
9.42957 229.067 9.82857 228.973 10.1216 228.78 cv
10.4086 228.586 10.5546 228.317 10.5546 227.977 cv
10.5546 227.643 10.4086 227.385 10.1216 227.192 cv
9.82857 226.998 9.42957 226.899 8.92056 226.899 cv
8.41056 226.899 8.00656 226.998 7.71857 227.192 cv
7.42557 227.385 7.27956 227.643 7.27956 227.977 cv
6.53556 227.977 mo
6.53556 227.362 6.75256 226.87 7.17957 226.506 cv
7.60757 226.143 8.18756 225.961 8.92056 225.961 cv
9.65257 225.961 10.2326 226.143 10.6606 226.512 cv
11.0886 226.875 11.2996 227.362 11.2996 227.977 cv
11.2996 228.604 11.0886 229.096 10.6606 229.459 cv
10.2326 229.823 9.65257 230.004 8.92056 230.004 cv
8.18756 230.004 7.60757 229.823 7.17957 229.459 cv
6.75256 229.09 6.53556 228.598 6.53556 227.977 cv
2.96756 234.024 mo
2.96756 234.358 3.11356 234.627 3.40656 234.821 cv
3.69357 235.014 4.09256 235.108 4.60156 235.108 cv
5.11756 235.108 5.52156 235.014 5.80856 234.821 cv
6.09557 234.627 6.24256 234.364 6.24256 234.024 cv
6.24256 233.684 6.09557 233.42 5.80856 233.227 cv
5.52156 233.034 5.11756 232.934 4.60156 232.934 cv
4.09756 232.934 3.69956 233.034 3.40656 233.227 cv
3.11356 233.42 2.96756 233.69 2.96756 234.024 cv
2.22256 228.733 mo
2.22256 227.795 li
11.2996 233.268 li
11.2996 234.206 li
2.22256 228.733 li
2.22256 234.024 mo
2.22256 233.409 2.43956 232.916 2.86757 232.547 cv
3.29556 232.178 3.86956 231.997 4.60156 231.997 cv
5.34056 231.997 5.92056 232.178 6.34756 232.547 cv
6.77557 232.911 6.98656 233.403 6.98656 234.024 cv
6.98656 234.645 6.77557 235.137 6.34756 235.5 cv
5.92056 235.858 5.33456 236.039 4.60156 236.039 cv
3.87556 236.039 3.29556 235.858 2.86757 235.495 cv
2.43956 235.131 2.22256 234.639 2.22256 234.024 cv
ef
2.02457 224.341 mo
2.02457 223.403 li
2.94456 222.818 3.84657 222.378 4.73157 222.091 cv
5.61657 221.798 6.48956 221.652 7.36256 221.652 cv
8.23557 221.652 9.12057 221.798 10.0046 222.091 cv
10.8896 222.378 11.7926 222.818 12.7126 223.403 cv
12.7126 224.341 li
11.8156 223.82 10.9306 223.433 10.0456 223.181 cv
9.16157 222.923 8.26456 222.794 7.36256 222.794 cv
6.46056 222.794 5.56956 222.923 4.69057 223.181 cv
3.81157 223.433 2.92057 223.82 2.02457 224.341 cv
ef
1.5 lw
2 lc
56.2936 45.9617 mo
157.749 404.762 li
259.203 444.825 li
360.658 448.716 li
462.112 449.121 li
563.567 449.162 li
/1 
[/DeviceCMYK] /CSA add_res
.905547 .71957 0 0 cmyk
@
56.2936 48.9617 mo
57.0896 48.9617 57.8526 48.6457 58.4146 48.0827 cv
58.9776 47.5207 59.2936 46.7577 59.2936 45.9617 cv
59.2936 45.1657 58.9776 44.4027 58.4146 43.8407 cv
57.8526 43.2777 57.0896 42.9617 56.2936 42.9617 cv
55.4976 42.9617 54.7346 43.2777 54.1726 43.8407 cv
53.6096 44.4027 53.2936 45.1657 53.2936 45.9617 cv
53.2936 46.7577 53.6096 47.5207 54.1726 48.0827 cv
54.7346 48.6457 55.4976 48.9617 56.2936 48.9617 cv
cp
f
1 lw
0 lc
56.2936 48.9617 mo
57.0896 48.9617 57.8526 48.6457 58.4146 48.0827 cv
58.9776 47.5207 59.2936 46.7577 59.2936 45.9617 cv
59.2936 45.1657 58.9776 44.4027 58.4146 43.8407 cv
57.8526 43.2777 57.0896 42.9617 56.2936 42.9617 cv
55.4976 42.9617 54.7346 43.2777 54.1726 43.8407 cv
53.6096 44.4027 53.2936 45.1657 53.2936 45.9617 cv
53.2936 46.7577 53.6096 47.5207 54.1726 48.0827 cv
54.7346 48.6457 55.4976 48.9617 56.2936 48.9617 cv
cp
@
157.748 407.762 mo
158.544 407.762 159.307 407.446 159.869 406.883 cv
160.432 406.321 160.748 405.558 160.748 404.762 cv
160.748 403.966 160.432 403.203 159.869 402.641 cv
159.307 402.078 158.544 401.762 157.748 401.762 cv
156.952 401.762 156.189 402.078 155.627 402.641 cv
155.064 403.203 154.748 403.966 154.748 404.762 cv
154.748 405.558 155.064 406.321 155.627 406.883 cv
156.189 407.446 156.952 407.762 157.748 407.762 cv
cp
f
157.748 407.762 mo
158.544 407.762 159.307 407.446 159.869 406.883 cv
160.432 406.321 160.748 405.558 160.748 404.762 cv
160.748 403.966 160.432 403.203 159.869 402.641 cv
159.307 402.078 158.544 401.762 157.748 401.762 cv
156.952 401.762 156.189 402.078 155.627 402.641 cv
155.064 403.203 154.748 403.966 154.748 404.762 cv
154.748 405.558 155.064 406.321 155.627 406.883 cv
156.189 407.446 156.952 407.762 157.748 407.762 cv
cp
@
259.203 447.825 mo
259.999 447.825 260.762 447.509 261.324 446.946 cv
261.887 446.384 262.203 445.621 262.203 444.825 cv
262.203 444.029 261.887 443.266 261.324 442.704 cv
260.762 442.141 259.999 441.825 259.203 441.825 cv
258.407 441.825 257.644 442.141 257.082 442.704 cv
256.519 443.266 256.203 444.029 256.203 444.825 cv
256.203 445.621 256.519 446.384 257.082 446.946 cv
257.644 447.509 258.407 447.825 259.203 447.825 cv
cp
f
259.203 447.825 mo
259.999 447.825 260.762 447.509 261.324 446.946 cv
261.887 446.384 262.203 445.621 262.203 444.825 cv
262.203 444.029 261.887 443.266 261.324 442.704 cv
260.762 442.141 259.999 441.825 259.203 441.825 cv
258.407 441.825 257.644 442.141 257.082 442.704 cv
256.519 443.266 256.203 444.029 256.203 444.825 cv
256.203 445.621 256.519 446.384 257.082 446.946 cv
257.644 447.509 258.407 447.825 259.203 447.825 cv
cp
@
360.657 451.716 mo
361.453 451.716 362.216 451.4 362.778 450.837 cv
363.341 450.275 363.657 449.512 363.657 448.716 cv
363.657 447.92 363.341 447.157 362.778 446.595 cv
362.216 446.032 361.453 445.716 360.657 445.716 cv
359.861 445.716 359.098 446.032 358.536 446.595 cv
357.973 447.157 357.657 447.92 357.657 448.716 cv
357.657 449.512 357.973 450.275 358.536 450.837 cv
359.098 451.4 359.861 451.716 360.657 451.716 cv
cp
f
360.657 451.716 mo
361.453 451.716 362.216 451.4 362.778 450.837 cv
363.341 450.275 363.657 449.512 363.657 448.716 cv
363.657 447.92 363.341 447.157 362.778 446.595 cv
362.216 446.032 361.453 445.716 360.657 445.716 cv
359.861 445.716 359.098 446.032 358.536 446.595 cv
357.973 447.157 357.657 447.92 357.657 448.716 cv
357.657 449.512 357.973 450.275 358.536 450.837 cv
359.098 451.4 359.861 451.716 360.657 451.716 cv
cp
@
462.112 452.122 mo
462.908 452.122 463.671 451.806 464.233 451.243 cv
464.796 450.681 465.112 449.918 465.112 449.122 cv
465.112 448.326 464.796 447.563 464.233 447.001 cv
463.671 446.438 462.908 446.122 462.112 446.122 cv
461.316 446.122 460.553 446.438 459.991 447.001 cv
459.428 447.563 459.112 448.326 459.112 449.122 cv
459.112 449.918 459.428 450.681 459.991 451.243 cv
460.553 451.806 461.316 452.122 462.112 452.122 cv
cp
f
462.112 452.122 mo
462.908 452.122 463.671 451.806 464.233 451.243 cv
464.796 450.681 465.112 449.918 465.112 449.122 cv
465.112 448.326 464.796 447.563 464.233 447.001 cv
463.671 446.438 462.908 446.122 462.112 446.122 cv
461.316 446.122 460.553 446.438 459.991 447.001 cv
459.428 447.563 459.112 448.326 459.112 449.122 cv
459.112 449.918 459.428 450.681 459.991 451.243 cv
460.553 451.806 461.316 452.122 462.112 452.122 cv
cp
@
563.566 452.162 mo
564.362 452.162 565.125 451.846 565.687 451.283 cv
566.25 450.721 566.566 449.958 566.566 449.162 cv
566.566 448.366 566.25 447.603 565.687 447.041 cv
565.125 446.478 564.362 446.162 563.566 446.162 cv
562.77 446.162 562.007 446.478 561.445 447.041 cv
560.882 447.603 560.566 448.366 560.566 449.162 cv
560.566 449.958 560.882 450.721 561.445 451.283 cv
562.007 451.846 562.77 452.162 563.566 452.162 cv
cp
f
563.566 452.162 mo
564.362 452.162 565.125 451.846 565.687 451.283 cv
566.25 450.721 566.566 449.958 566.566 449.162 cv
566.566 448.366 566.25 447.603 565.687 447.041 cv
565.125 446.478 564.362 446.162 563.566 446.162 cv
562.77 446.162 562.007 446.478 561.445 447.041 cv
560.882 447.603 560.566 448.366 560.566 449.162 cv
560.566 449.958 560.882 450.721 561.445 451.283 cv
562.007 451.846 562.77 452.162 563.566 452.162 cv
cp
@
.8 lw
2 lc
0 lj
30.9296 469.322 mo
30.9296 25.8017 li
1 /0 /CSD get_res sepcs
1 sep
@
588.93 469.322 mo
588.93 25.8017 li
@
30.9296 469.322 mo
588.93 469.322 li
@
30.9296 25.8017 mo
588.93 25.8017 li
@
1 lw
1 lc
1 lj
55.2056 42.0327 mo
55.3096 42.7117 55.3566 43.0327 55.3456 42.9937 cv
@
56.1876 38.6017 mo
55.3456 42.9937 li
52.3376 39.6847 li
@
38.3886 35.7907 mo
38.3886 34.8927 li
38.6376 35.0097 38.8866 35.0977 39.1406 35.1607 cv
39.3946 35.2247 39.6436 35.2537 39.8876 35.2537 cv
40.5366 35.2537 41.0346 35.0337 41.3766 34.5997 cv
41.7236 34.1597 41.9186 33.4957 41.9676 32.6027 cv
41.7776 32.8807 41.5376 33.0957 41.2496 33.2467 cv
40.9616 33.3977 40.6396 33.4717 40.2876 33.4717 cv
39.5606 33.4717 38.9796 33.2517 38.5546 32.8117 cv
38.1296 32.3677 37.9196 31.7677 37.9196 31.0007 cv
37.9196 30.2537 38.1396 29.6527 38.5836 29.1987 cv
39.0286 28.7447 39.6146 28.5197 40.3516 28.5197 cv
41.1966 28.5197 41.8356 28.8427 42.2806 29.4917 cv
42.7246 30.1367 42.9496 31.0737 42.9496 32.3047 cv
42.9496 33.4517 42.6756 34.3697 42.1286 35.0587 cv
41.5866 35.7417 40.8546 36.0837 39.9316 36.0837 cv
39.6826 36.0837 39.4336 36.0597 39.1796 36.0107 cv
38.9256 35.9617 38.6616 35.8887 38.3886 35.7907 cv
40.3516 32.6997 mo
40.7956 32.6997 41.1426 32.5487 41.4016 32.2457 cv
41.6596 31.9427 41.7916 31.5277 41.7916 31.0007 cv
41.7916 30.4777 41.6596 30.0627 41.4016 29.7607 cv
41.1426 29.4527 40.7956 29.3017 40.3516 29.3017 cv
39.9076 29.3017 39.5556 29.4527 39.2966 29.7607 cv
39.0376 30.0627 38.9106 30.4777 38.9106 31.0007 cv
38.9106 31.5277 39.0376 31.9427 39.2966 32.2457 cv
39.5556 32.5487 39.9076 32.6997 40.3516 32.6997 cv
ef
44.7186 35.9417 mo
45.7489 35.9417 li
45.7489 34.7015 li
44.7186 34.7015 li
cp
f
49.9486 29.3007 mo
49.4406 29.3007 49.0596 29.5497 48.8016 30.0527 cv
48.5476 30.5507 48.4206 31.3027 48.4206 32.3037 cv
48.4206 33.3047 48.5476 34.0517 48.8016 34.5547 cv
49.0596 35.0527 49.4406 35.3017 49.9486 35.3017 cv
50.4616 35.3017 50.8426 35.0527 51.0956 34.5547 cv
51.3546 34.0517 51.4816 33.3047 51.4816 32.3037 cv
51.4816 31.3027 51.3546 30.5507 51.0956 30.0527 cv
50.8426 29.5497 50.4616 29.3007 49.9486 29.3007 cv
49.9486 28.5197 mo
50.7636 28.5197 51.3886 28.8417 51.8186 29.4907 cv
52.2536 30.1357 52.4686 31.0727 52.4686 32.3037 cv
52.4686 33.5297 52.2536 34.4667 51.8186 35.1157 cv
51.3886 35.7607 50.7636 36.0827 49.9486 36.0827 cv
49.1336 36.0827 48.5086 35.7607 48.0736 35.1157 cv
47.6436 34.4667 47.4286 33.5297 47.4286 32.3037 cv
47.4286 31.0727 47.6436 30.1357 48.0736 29.4907 cv
48.5086 28.8417 49.1336 28.5197 49.9486 28.5197 cv
ef
56.3086 32.4797 mo
55.8396 32.4797 55.4686 32.6067 55.2006 32.8557 cv
54.9316 33.1047 54.7996 33.4517 54.7996 33.8907 cv
54.7996 34.3307 54.9316 34.6767 55.2006 34.9257 cv
55.4686 35.1747 55.8396 35.3017 56.3086 35.3017 cv
56.7776 35.3017 57.1486 35.1747 57.4166 34.9257 cv
57.6856 34.6717 57.8226 34.3257 57.8226 33.8907 cv
57.8226 33.4517 57.6856 33.1047 57.4166 32.8557 cv
57.1486 32.6067 56.7826 32.4797 56.3086 32.4797 cv
55.3226 32.0597 mo
54.8976 31.9577 54.5706 31.7567 54.3306 31.4687 cv
54.0966 31.1807 53.9796 30.8247 53.9796 30.4097 cv
53.9796 29.8287 54.1846 29.3647 54.5996 29.0277 cv
55.0146 28.6907 55.5856 28.5197 56.3086 28.5197 cv
57.0366 28.5197 57.6026 28.6907 58.0176 29.0277 cv
58.4326 29.3647 58.6376 29.8287 58.6376 30.4097 cv
58.6376 30.8247 58.5206 31.1807 58.2816 31.4687 cv
58.0466 31.7567 57.7196 31.9577 57.2996 32.0597 cv
57.7736 32.1717 58.1446 32.3867 58.4086 32.7087 cv
58.6766 33.0317 58.8086 33.4267 58.8086 33.8907 cv
58.8086 34.5987 58.5936 35.1407 58.1596 35.5167 cv
57.7296 35.8927 57.1146 36.0837 56.3086 36.0837 cv
55.5026 36.0837 54.8876 35.8927 54.4536 35.5167 cv
54.0236 35.1407 53.8086 34.5987 53.8086 33.8907 cv
53.8086 33.4267 53.9406 33.0317 54.2086 32.7087 cv
54.4776 32.3867 54.8486 32.1717 55.3226 32.0597 cv
54.9606 30.5017 mo
54.9606 30.8777 55.0786 31.1757 55.3126 31.3857 cv
55.5516 31.5957 55.8836 31.7037 56.3086 31.7037 cv
56.7336 31.7037 57.0606 31.5957 57.2996 31.3857 cv
57.5386 31.1757 57.6616 30.8777 57.6616 30.5017 cv
57.6616 30.1257 57.5386 29.8287 57.2996 29.6187 cv
57.0606 29.4087 56.7336 29.3007 56.3086 29.3007 cv
55.8836 29.3007 55.5516 29.4087 55.3126 29.6187 cv
55.0786 29.8287 54.9606 30.1257 54.9606 30.5017 cv
ef
62.6686 29.3007 mo
62.1606 29.3007 61.7796 29.5497 61.5216 30.0527 cv
61.2676 30.5507 61.1406 31.3027 61.1406 32.3037 cv
61.1406 33.3047 61.2676 34.0517 61.5216 34.5547 cv
61.7796 35.0527 62.1606 35.3017 62.6686 35.3017 cv
63.1816 35.3017 63.5626 35.0527 63.8156 34.5547 cv
64.0746 34.0517 64.2016 33.3047 64.2016 32.3037 cv
64.2016 31.3027 64.0746 30.5507 63.8156 30.0527 cv
63.5626 29.5497 63.1816 29.3007 62.6686 29.3007 cv
62.6686 28.5197 mo
63.4836 28.5197 64.1086 28.8417 64.5386 29.4907 cv
64.9736 30.1357 65.1886 31.0727 65.1886 32.3037 cv
65.1886 33.5297 64.9736 34.4667 64.5386 35.1157 cv
64.1086 35.7607 63.4836 36.0827 62.6686 36.0827 cv
61.8536 36.0827 61.2286 35.7607 60.7936 35.1157 cv
60.3636 34.4667 60.1486 33.5297 60.1486 32.3037 cv
60.1486 31.0727 60.3636 30.1357 60.7936 29.4907 cv
61.2286 28.8417 61.8536 28.5197 62.6686 28.5197 cv
ef
73.1196 32.7337 mo
72.8366 32.7337 72.6116 32.8557 72.4506 33.0947 cv
72.2896 33.3347 72.2116 33.6707 72.2116 34.1007 cv
72.2116 34.5257 72.2896 34.8577 72.4506 35.1017 cv
72.6116 35.3407 72.8366 35.4627 73.1196 35.4627 cv
73.3976 35.4627 73.6126 35.3407 73.7736 35.1017 cv
73.9346 34.8577 74.0176 34.5257 74.0176 34.1007 cv
74.0176 33.6757 73.9346 33.3387 73.7736 33.0997 cv
73.6126 32.8557 73.3976 32.7337 73.1196 32.7337 cv
73.1196 32.1137 mo
73.6326 32.1137 74.0426 32.2947 74.3456 32.6507 cv
74.6476 33.0067 74.7996 33.4907 74.7996 34.1007 cv
74.7996 34.7117 74.6476 35.1947 74.3406 35.5507 cv
74.0376 35.9077 73.6326 36.0837 73.1196 36.0837 cv
72.5976 36.0837 72.1866 35.9077 71.8846 35.5507 cv
71.5816 35.1947 71.4306 34.7117 71.4306 34.1007 cv
71.4306 33.4907 71.5816 33.0067 71.8846 32.6507 cv
72.1916 32.2947 72.6016 32.1137 73.1196 32.1137 cv
68.0806 29.1397 mo
67.8026 29.1397 67.5776 29.2617 67.4166 29.5057 cv
67.2556 29.7457 67.1776 30.0777 67.1776 30.5027 cv
67.1776 30.9317 67.2556 31.2687 67.4166 31.5077 cv
67.5776 31.7477 67.7976 31.8697 68.0806 31.8697 cv
68.3636 31.8697 68.5836 31.7477 68.7446 31.5077 cv
68.9056 31.2687 68.9886 30.9317 68.9886 30.5027 cv
68.9886 30.0827 68.9056 29.7507 68.7446 29.5057 cv
68.5836 29.2617 68.3586 29.1397 68.0806 29.1397 cv
72.4896 28.5197 mo
73.2706 28.5197 li
68.7106 36.0837 li
67.9296 36.0837 li
72.4896 28.5197 li
68.0806 28.5197 mo
68.5936 28.5197 69.0036 28.7007 69.3106 29.0567 cv
69.6186 29.4137 69.7696 29.8917 69.7696 30.5027 cv
69.7696 31.1177 69.6186 31.6007 69.3106 31.9577 cv
69.0086 32.3137 68.5986 32.4897 68.0806 32.4897 cv
67.5626 32.4897 67.1526 32.3137 66.8496 31.9577 cv
66.5526 31.6007 66.4006 31.1127 66.4006 30.5027 cv
66.4006 29.8967 66.5526 29.4137 66.8546 29.0567 cv
67.1576 28.7007 67.5676 28.5197 68.0806 28.5197 cv
ef
156.661 400.833 mo
156.765 401.512 156.812 401.833 156.801 401.794 cv
@
157.643 397.402 mo
156.801 401.794 li
153.793 398.485 li
@
142.748 390.811 mo
143.222 390.914 143.588 391.123 143.852 391.441 cv
144.12 391.758 144.252 392.154 144.252 392.623 cv
144.252 393.34 144.003 393.897 143.51 394.292 cv
143.017 394.688 142.313 394.883 141.4 394.883 cv
141.093 394.883 140.78 394.854 140.453 394.79 cv
140.131 394.732 139.799 394.644 139.452 394.522 cv
139.452 393.57 li
139.726 393.731 140.023 393.848 140.351 393.931 cv
140.678 394.014 141.015 394.053 141.371 394.053 cv
141.991 394.053 142.46 393.931 142.782 393.687 cv
143.109 393.443 143.27 393.086 143.27 392.623 cv
143.27 392.193 143.119 391.856 142.816 391.617 cv
142.519 391.373 142.099 391.25 141.561 391.25 cv
140.712 391.25 li
140.712 390.44 li
141.601 390.44 li
142.084 390.44 142.455 390.342 142.714 390.152 cv
142.973 389.956 143.1 389.678 143.1 389.312 cv
143.1 388.936 142.968 388.653 142.699 388.453 cv
142.436 388.252 142.055 388.15 141.561 388.15 cv
141.293 388.15 141 388.179 140.692 388.238 cv
140.385 388.296 140.043 388.389 139.672 388.511 cv
139.672 387.632 li
140.048 387.53 140.394 387.452 140.722 387.398 cv
141.049 387.344 141.361 387.32 141.649 387.32 cv
142.396 387.32 142.992 387.491 143.427 387.832 cv
143.861 388.169 144.081 388.628 144.081 389.209 cv
144.081 389.615 143.964 389.956 143.734 390.235 cv
143.505 390.513 143.173 390.704 142.748 390.811 cv
ef
146.119 394.742 mo
147.149 394.742 li
147.149 393.501 li
146.119 393.501 li
cp
f
149.269 394.591 mo
149.269 393.693 li
149.518 393.81 149.767 393.898 150.021 393.961 cv
150.275 394.025 150.524 394.054 150.768 394.054 cv
151.417 394.054 151.915 393.834 152.257 393.4 cv
152.604 392.96 152.799 392.296 152.848 391.403 cv
152.658 391.681 152.418 391.896 152.13 392.047 cv
151.842 392.198 151.52 392.272 151.168 392.272 cv
150.441 392.272 149.86 392.052 149.435 391.612 cv
149.01 391.168 148.8 390.568 148.8 389.801 cv
148.8 389.054 149.02 388.453 149.464 387.999 cv
149.909 387.545 150.495 387.32 151.232 387.32 cv
152.077 387.32 152.716 387.643 153.161 388.292 cv
153.605 388.937 153.83 389.874 153.83 391.105 cv
153.83 392.252 153.556 393.17 153.009 393.859 cv
152.467 394.542 151.735 394.884 150.812 394.884 cv
150.563 394.884 150.314 394.86 150.06 394.811 cv
149.806 394.762 149.542 394.689 149.269 394.591 cv
151.232 391.5 mo
151.676 391.5 152.023 391.349 152.282 391.046 cv
152.54 390.743 152.672 390.328 152.672 389.801 cv
152.672 389.278 152.54 388.863 152.282 388.561 cv
152.023 388.253 151.676 388.102 151.232 388.102 cv
150.788 388.102 150.436 388.253 150.177 388.561 cv
149.918 388.863 149.791 389.278 149.791 389.801 cv
149.791 390.328 149.918 390.743 150.177 391.046 cv
150.436 391.349 150.788 391.5 151.232 391.5 cv
ef
155.77 393.912 mo
157.381 393.912 li
157.381 388.35 li
155.628 388.702 li
155.628 387.804 li
157.372 387.452 li
158.358 387.452 li
158.358 393.912 li
159.969 393.912 li
159.969 394.742 li
155.77 394.742 li
155.77 393.912 li
ef
164.189 391.28 mo
163.72 391.28 163.349 391.407 163.081 391.656 cv
162.812 391.905 162.68 392.252 162.68 392.691 cv
162.68 393.131 162.812 393.477 163.081 393.726 cv
163.349 393.975 163.72 394.102 164.189 394.102 cv
164.658 394.102 165.029 393.975 165.297 393.726 cv
165.566 393.472 165.703 393.126 165.703 392.691 cv
165.703 392.252 165.566 391.905 165.297 391.656 cv
165.029 391.407 164.663 391.28 164.189 391.28 cv
163.203 390.86 mo
162.778 390.758 162.451 390.557 162.211 390.269 cv
161.977 389.981 161.86 389.625 161.86 389.21 cv
161.86 388.629 162.065 388.165 162.48 387.828 cv
162.895 387.491 163.466 387.32 164.189 387.32 cv
164.917 387.32 165.483 387.491 165.898 387.828 cv
166.313 388.165 166.518 388.629 166.518 389.21 cv
166.518 389.625 166.401 389.981 166.162 390.269 cv
165.927 390.557 165.6 390.758 165.18 390.86 cv
165.654 390.972 166.025 391.187 166.289 391.509 cv
166.557 391.832 166.689 392.227 166.689 392.691 cv
166.689 393.399 166.474 393.941 166.04 394.317 cv
165.61 394.693 164.995 394.884 164.189 394.884 cv
163.383 394.884 162.768 394.693 162.334 394.317 cv
161.904 393.941 161.689 393.399 161.689 392.691 cv
161.689 392.227 161.821 391.832 162.089 391.509 cv
162.358 391.187 162.729 390.972 163.203 390.86 cv
162.841 389.302 mo
162.841 389.678 162.959 389.976 163.193 390.186 cv
163.432 390.396 163.764 390.504 164.189 390.504 cv
164.614 390.504 164.941 390.396 165.18 390.186 cv
165.419 389.976 165.542 389.678 165.542 389.302 cv
165.542 388.926 165.419 388.629 165.18 388.419 cv
164.941 388.209 164.614 388.101 164.189 388.101 cv
163.764 388.101 163.432 388.209 163.193 388.419 cv
162.959 388.629 162.841 388.926 162.841 389.302 cv
ef
174.64 391.534 mo
174.357 391.534 174.132 391.656 173.971 391.895 cv
173.81 392.135 173.732 392.471 173.732 392.901 cv
173.732 393.326 173.81 393.658 173.971 393.902 cv
174.132 394.141 174.357 394.263 174.64 394.263 cv
174.918 394.263 175.133 394.141 175.294 393.902 cv
175.455 393.658 175.538 393.326 175.538 392.901 cv
175.538 392.476 175.455 392.139 175.294 391.9 cv
175.133 391.656 174.918 391.534 174.64 391.534 cv
174.64 390.914 mo
175.153 390.914 175.563 391.095 175.866 391.451 cv
176.168 391.807 176.32 392.291 176.32 392.901 cv
176.32 393.512 176.168 393.995 175.861 394.351 cv
175.558 394.708 175.153 394.884 174.64 394.884 cv
174.118 394.884 173.707 394.708 173.405 394.351 cv
173.102 393.995 172.951 393.512 172.951 392.901 cv
172.951 392.291 173.102 391.807 173.405 391.451 cv
173.712 391.095 174.122 390.914 174.64 390.914 cv
169.601 387.94 mo
169.323 387.94 169.098 388.062 168.937 388.306 cv
168.776 388.546 168.698 388.878 168.698 389.303 cv
168.698 389.732 168.776 390.069 168.937 390.308 cv
169.098 390.548 169.318 390.67 169.601 390.67 cv
169.884 390.67 170.104 390.548 170.265 390.308 cv
170.426 390.069 170.509 389.732 170.509 389.303 cv
170.509 388.883 170.426 388.551 170.265 388.306 cv
170.104 388.062 169.879 387.94 169.601 387.94 cv
174.01 387.32 mo
174.791 387.32 li
170.231 394.884 li
169.45 394.884 li
174.01 387.32 li
169.601 387.32 mo
170.114 387.32 170.524 387.501 170.831 387.857 cv
171.139 388.214 171.29 388.692 171.29 389.303 cv
171.29 389.918 171.139 390.401 170.831 390.758 cv
170.529 391.114 170.119 391.29 169.601 391.29 cv
169.083 391.29 168.673 391.114 168.37 390.758 cv
168.073 390.401 167.921 389.913 167.921 389.303 cv
167.921 388.697 168.073 388.214 168.375 387.857 cv
168.678 387.501 169.088 387.32 169.601 387.32 cv
ef
258.115 440.896 mo
258.219 441.575 258.266 441.896 258.255 441.857 cv
@
259.097 437.465 mo
258.255 441.857 li
255.247 438.548 li
@
244.148 430.891 mo
244.622 430.994 244.988 431.203 245.252 431.521 cv
245.52 431.838 245.652 432.234 245.652 432.703 cv
245.652 433.42 245.403 433.977 244.91 434.372 cv
244.417 434.768 243.713 434.963 242.8 434.963 cv
242.493 434.963 242.18 434.934 241.853 434.87 cv
241.531 434.812 241.199 434.724 240.852 434.602 cv
240.852 433.65 li
241.126 433.811 241.423 433.928 241.751 434.011 cv
242.078 434.094 242.415 434.133 242.771 434.133 cv
243.391 434.133 243.86 434.011 244.182 433.767 cv
244.509 433.523 244.67 433.166 244.67 432.703 cv
244.67 432.273 244.519 431.936 244.216 431.697 cv
243.919 431.453 243.499 431.33 242.961 431.33 cv
242.112 431.33 li
242.112 430.52 li
243.001 430.52 li
243.484 430.52 243.855 430.422 244.114 430.232 cv
244.373 430.036 244.5 429.758 244.5 429.392 cv
244.5 429.016 244.368 428.733 244.099 428.533 cv
243.836 428.332 243.455 428.23 242.961 428.23 cv
242.693 428.23 242.4 428.259 242.092 428.318 cv
241.785 428.376 241.443 428.469 241.072 428.591 cv
241.072 427.712 li
241.448 427.61 241.794 427.532 242.122 427.478 cv
242.449 427.424 242.761 427.4 243.049 427.4 cv
243.796 427.4 244.392 427.571 244.827 427.912 cv
245.261 428.249 245.481 428.708 245.481 429.289 cv
245.481 429.695 245.364 430.036 245.134 430.315 cv
244.905 430.593 244.573 430.784 244.148 430.891 cv
ef
247.519 434.822 mo
248.549 434.822 li
248.549 433.581 li
247.519 433.581 li
cp
f
253.748 430.891 mo
254.222 430.994 254.588 431.203 254.852 431.521 cv
255.12 431.838 255.252 432.234 255.252 432.703 cv
255.252 433.42 255.003 433.977 254.51 434.372 cv
254.017 434.768 253.313 434.963 252.4 434.963 cv
252.093 434.963 251.78 434.934 251.453 434.87 cv
251.131 434.812 250.799 434.724 250.452 434.602 cv
250.452 433.65 li
250.726 433.811 251.023 433.928 251.351 434.011 cv
251.678 434.094 252.015 434.133 252.371 434.133 cv
252.991 434.133 253.46 434.011 253.782 433.767 cv
254.109 433.523 254.27 433.166 254.27 432.703 cv
254.27 432.273 254.119 431.936 253.816 431.697 cv
253.519 431.453 253.099 431.33 252.561 431.33 cv
251.712 431.33 li
251.712 430.52 li
252.601 430.52 li
253.084 430.52 253.455 430.422 253.714 430.232 cv
253.973 430.036 254.1 429.758 254.1 429.392 cv
254.1 429.016 253.968 428.733 253.699 428.533 cv
253.436 428.332 253.055 428.23 252.561 428.23 cv
252.293 428.23 252 428.259 251.692 428.318 cv
251.385 428.376 251.043 428.469 250.672 428.591 cv
250.672 427.712 li
251.048 427.61 251.394 427.532 251.722 427.478 cv
252.049 427.424 252.361 427.4 252.649 427.4 cv
253.396 427.4 253.992 427.571 254.427 427.912 cv
254.861 428.249 255.081 428.708 255.081 429.289 cv
255.081 429.695 254.964 430.036 254.734 430.315 cv
254.505 430.593 254.173 430.784 253.748 430.891 cv
ef
259.829 428.391 mo
257.339 432.283 li
259.829 432.283 li
259.829 428.391 li
259.57 427.532 mo
260.81 427.532 li
260.81 432.283 li
261.85 432.283 li
261.85 433.103 li
260.81 433.103 li
260.81 434.822 li
259.829 434.822 li
259.829 433.103 li
256.538 433.103 li
256.538 432.151 li
259.57 427.532 li
ef
264.329 433.992 mo
267.771 433.992 li
267.771 434.822 li
263.142 434.822 li
263.142 433.992 li
263.518 433.606 264.026 433.084 264.671 432.434 cv
265.32 431.78 265.725 431.36 265.892 431.17 cv
266.209 430.813 266.429 430.515 266.551 430.271 cv
266.678 430.022 266.741 429.783 266.741 429.544 cv
266.741 429.158 266.604 428.841 266.331 428.597 cv
266.062 428.352 265.706 428.23 265.271 428.23 cv
264.964 428.23 264.637 428.284 264.29 428.391 cv
263.948 428.499 263.582 428.66 263.191 428.88 cv
263.191 427.884 li
263.587 427.722 263.958 427.605 264.305 427.522 cv
264.651 427.439 264.964 427.4 265.252 427.4 cv
266.009 427.4 266.609 427.591 267.058 427.967 cv
267.508 428.343 267.732 428.85 267.732 429.48 cv
267.732 429.778 267.674 430.066 267.561 430.335 cv
267.449 430.603 267.249 430.916 266.951 431.282 cv
266.868 431.375 266.609 431.648 266.175 432.102 cv
265.74 432.552 265.125 433.181 264.329 433.992 cv
ef
276.041 431.614 mo
275.758 431.614 275.533 431.736 275.372 431.975 cv
275.211 432.215 275.133 432.551 275.133 432.981 cv
275.133 433.406 275.211 433.738 275.372 433.982 cv
275.533 434.221 275.758 434.343 276.041 434.343 cv
276.319 434.343 276.534 434.221 276.695 433.982 cv
276.856 433.738 276.939 433.406 276.939 432.981 cv
276.939 432.556 276.856 432.219 276.695 431.98 cv
276.534 431.736 276.319 431.614 276.041 431.614 cv
276.041 430.994 mo
276.554 430.994 276.964 431.175 277.267 431.531 cv
277.569 431.887 277.721 432.371 277.721 432.981 cv
277.721 433.592 277.569 434.075 277.262 434.431 cv
276.959 434.788 276.554 434.964 276.041 434.964 cv
275.519 434.964 275.108 434.788 274.806 434.431 cv
274.503 434.075 274.352 433.592 274.352 432.981 cv
274.352 432.371 274.503 431.887 274.806 431.531 cv
275.113 431.175 275.523 430.994 276.041 430.994 cv
271.002 428.02 mo
270.724 428.02 270.499 428.142 270.338 428.386 cv
270.177 428.626 270.099 428.958 270.099 429.383 cv
270.099 429.812 270.177 430.149 270.338 430.388 cv
270.499 430.628 270.719 430.75 271.002 430.75 cv
271.285 430.75 271.505 430.628 271.666 430.388 cv
271.827 430.149 271.91 429.812 271.91 429.383 cv
271.91 428.963 271.827 428.631 271.666 428.386 cv
271.505 428.142 271.28 428.02 271.002 428.02 cv
275.411 427.4 mo
276.192 427.4 li
271.632 434.964 li
270.851 434.964 li
275.411 427.4 li
271.002 427.4 mo
271.515 427.4 271.925 427.581 272.232 427.937 cv
272.54 428.294 272.691 428.772 272.691 429.383 cv
272.691 429.998 272.54 430.481 272.232 430.838 cv
271.93 431.194 271.52 431.37 271.002 431.37 cv
270.484 431.37 270.074 431.194 269.771 430.838 cv
269.474 430.481 269.322 429.993 269.322 429.383 cv
269.322 428.777 269.474 428.294 269.776 427.937 cv
270.079 427.581 270.489 427.4 271.002 427.4 cv
ef
359.57 444.787 mo
359.674 445.466 359.721 445.787 359.71 445.748 cv
@
360.552 441.356 mo
359.71 445.748 li
356.702 442.439 li
@
345.668 434.731 mo
346.142 434.834 346.508 435.043 346.772 435.361 cv
347.04 435.678 347.172 436.074 347.172 436.543 cv
347.172 437.26 346.923 437.817 346.43 438.212 cv
345.937 438.608 345.233 438.803 344.32 438.803 cv
344.013 438.803 343.7 438.774 343.373 438.71 cv
343.051 438.652 342.719 438.564 342.372 438.442 cv
342.372 437.49 li
342.646 437.651 342.943 437.768 343.271 437.851 cv
343.598 437.934 343.935 437.973 344.291 437.973 cv
344.911 437.973 345.38 437.851 345.702 437.607 cv
346.029 437.363 346.19 437.006 346.19 436.543 cv
346.19 436.113 346.039 435.776 345.736 435.537 cv
345.439 435.293 345.019 435.17 344.481 435.17 cv
343.632 435.17 li
343.632 434.36 li
344.521 434.36 li
345.004 434.36 345.375 434.262 345.634 434.072 cv
345.893 433.877 346.02 433.598 346.02 433.232 cv
346.02 432.856 345.888 432.573 345.619 432.373 cv
345.356 432.172 344.975 432.07 344.481 432.07 cv
344.213 432.07 343.92 432.099 343.612 432.158 cv
343.305 432.216 342.963 432.309 342.592 432.431 cv
342.592 431.552 li
342.968 431.45 343.314 431.372 343.642 431.318 cv
343.969 431.264 344.281 431.24 344.569 431.24 cv
345.316 431.24 345.912 431.411 346.347 431.752 cv
346.781 432.089 347.001 432.548 347.001 433.129 cv
347.001 433.535 346.884 433.877 346.654 434.155 cv
346.425 434.433 346.093 434.624 345.668 434.731 cv
ef
349.039 438.662 mo
350.069 438.662 li
350.069 437.422 li
349.039 437.422 li
cp
f
353.009 437.832 mo
356.451 437.832 li
356.451 438.662 li
351.822 438.662 li
351.822 437.832 li
352.198 437.446 352.706 436.924 353.351 436.274 cv
354 435.62 354.405 435.2 354.572 435.01 cv
354.889 434.653 355.109 434.355 355.231 434.111 cv
355.358 433.862 355.421 433.623 355.421 433.384 cv
355.421 432.998 355.284 432.681 355.011 432.436 cv
354.742 432.192 354.386 432.07 353.951 432.07 cv
353.644 432.07 353.317 432.124 352.97 432.231 cv
352.628 432.339 352.262 432.5 351.871 432.72 cv
351.871 431.724 li
352.267 431.562 352.638 431.445 352.985 431.362 cv
353.331 431.279 353.644 431.24 353.932 431.24 cv
354.689 431.24 355.289 431.431 355.738 431.807 cv
356.188 432.183 356.412 432.69 356.412 433.32 cv
356.412 433.618 356.354 433.906 356.241 434.175 cv
356.129 434.443 355.929 434.756 355.631 435.122 cv
355.548 435.215 355.289 435.488 354.855 435.942 cv
354.42 436.392 353.805 437.021 353.009 437.832 cv
ef
360.629 435.2 mo
360.16 435.2 359.789 435.327 359.521 435.576 cv
359.252 435.825 359.12 436.172 359.12 436.611 cv
359.12 437.051 359.252 437.397 359.521 437.646 cv
359.789 437.895 360.16 438.022 360.629 438.022 cv
361.098 438.022 361.469 437.895 361.737 437.646 cv
362.006 437.392 362.143 437.046 362.143 436.611 cv
362.143 436.172 362.006 435.825 361.737 435.576 cv
361.469 435.327 361.103 435.2 360.629 435.2 cv
359.643 434.78 mo
359.218 434.678 358.891 434.477 358.651 434.189 cv
358.417 433.901 358.3 433.545 358.3 433.13 cv
358.3 432.549 358.505 432.085 358.92 431.748 cv
359.335 431.411 359.906 431.24 360.629 431.24 cv
361.357 431.24 361.923 431.411 362.338 431.748 cv
362.753 432.085 362.958 432.549 362.958 433.13 cv
362.958 433.545 362.841 433.901 362.602 434.189 cv
362.367 434.477 362.04 434.678 361.62 434.78 cv
362.094 434.892 362.465 435.107 362.729 435.429 cv
362.997 435.752 363.129 436.147 363.129 436.611 cv
363.129 437.319 362.914 437.861 362.48 438.237 cv
362.05 438.613 361.435 438.804 360.629 438.804 cv
359.823 438.804 359.208 438.613 358.774 438.237 cv
358.344 437.861 358.129 437.319 358.129 436.611 cv
358.129 436.147 358.261 435.752 358.529 435.429 cv
358.798 435.107 359.169 434.892 359.643 434.78 cv
359.281 433.222 mo
359.281 433.598 359.399 433.896 359.633 434.106 cv
359.872 434.316 360.204 434.424 360.629 434.424 cv
361.054 434.424 361.381 434.316 361.62 434.106 cv
361.859 433.896 361.982 433.598 361.982 433.222 cv
361.982 432.846 361.859 432.549 361.62 432.339 cv
361.381 432.129 361.054 432.021 360.629 432.021 cv
360.204 432.021 359.872 432.129 359.633 432.339 cv
359.399 432.549 359.281 432.846 359.281 433.222 cv
ef
367.111 434.624 mo
366.667 434.624 366.315 434.775 366.056 435.078 cv
365.798 435.381 365.671 435.796 365.671 436.323 cv
365.671 436.846 365.798 437.261 366.056 437.568 cv
366.315 437.871 366.667 438.022 367.111 438.022 cv
367.555 438.022 367.902 437.871 368.161 437.568 cv
368.42 437.261 368.551 436.846 368.551 436.323 cv
368.551 435.796 368.42 435.381 368.161 435.078 cv
367.902 434.775 367.555 434.624 367.111 434.624 cv
369.069 431.533 mo
369.069 432.432 li
368.82 432.314 368.571 432.227 368.317 432.163 cv
368.068 432.1 367.819 432.07 367.57 432.07 cv
366.921 432.07 366.423 432.29 366.076 432.729 cv
365.734 433.169 365.539 433.833 365.49 434.722 cv
365.68 434.438 365.924 434.224 366.213 434.072 cv
366.501 433.921 366.823 433.843 367.17 433.843 cv
367.902 433.843 368.478 434.067 368.903 434.512 cv
369.328 434.956 369.543 435.557 369.543 436.323 cv
369.543 437.07 369.323 437.671 368.879 438.125 cv
368.434 438.579 367.848 438.804 367.111 438.804 cv
366.266 438.804 365.622 438.481 365.177 437.837 cv
364.733 437.187 364.508 436.25 364.508 435.024 cv
364.508 433.872 364.782 432.954 365.329 432.27 cv
365.876 431.582 366.608 431.24 367.531 431.24 cv
367.78 431.24 368.029 431.265 368.278 431.313 cv
368.532 431.362 368.796 431.436 369.069 431.533 cv
ef
377.44 435.454 mo
377.157 435.454 376.932 435.576 376.771 435.815 cv
376.61 436.055 376.532 436.391 376.532 436.821 cv
376.532 437.246 376.61 437.578 376.771 437.822 cv
376.932 438.061 377.157 438.183 377.44 438.183 cv
377.718 438.183 377.933 438.061 378.094 437.822 cv
378.255 437.578 378.338 437.246 378.338 436.821 cv
378.338 436.396 378.255 436.059 378.094 435.82 cv
377.933 435.576 377.718 435.454 377.44 435.454 cv
377.44 434.834 mo
377.953 434.834 378.363 435.015 378.666 435.371 cv
378.968 435.727 379.12 436.211 379.12 436.821 cv
379.12 437.432 378.968 437.915 378.661 438.271 cv
378.358 438.628 377.953 438.804 377.44 438.804 cv
376.918 438.804 376.507 438.628 376.205 438.271 cv
375.902 437.915 375.751 437.432 375.751 436.821 cv
375.751 436.211 375.902 435.727 376.205 435.371 cv
376.512 435.015 376.922 434.834 377.44 434.834 cv
372.401 431.86 mo
372.123 431.86 371.898 431.982 371.737 432.226 cv
371.576 432.466 371.498 432.798 371.498 433.223 cv
371.498 433.652 371.576 433.989 371.737 434.228 cv
371.898 434.468 372.118 434.59 372.401 434.59 cv
372.684 434.59 372.904 434.468 373.065 434.228 cv
373.226 433.989 373.309 433.652 373.309 433.223 cv
373.309 432.803 373.226 432.471 373.065 432.226 cv
372.904 431.982 372.679 431.86 372.401 431.86 cv
376.81 431.24 mo
377.591 431.24 li
373.031 438.804 li
372.25 438.804 li
376.81 431.24 li
372.401 431.24 mo
372.914 431.24 373.324 431.421 373.631 431.777 cv
373.939 432.134 374.09 432.612 374.09 433.223 cv
374.09 433.838 373.939 434.321 373.631 434.678 cv
373.329 435.034 372.919 435.21 372.401 435.21 cv
371.883 435.21 371.473 435.034 371.17 434.678 cv
370.873 434.321 370.721 433.833 370.721 433.223 cv
370.721 432.617 370.873 432.134 371.175 431.777 cv
371.478 431.421 371.888 431.24 372.401 431.24 cv
ef
461.024 445.192 mo
461.128 445.871 461.175 446.192 461.164 446.153 cv
@
462.006 441.761 mo
461.164 446.153 li
458.155 442.844 li
@
447.068 435.211 mo
447.542 435.314 447.908 435.523 448.172 435.841 cv
448.44 436.158 448.572 436.554 448.572 437.023 cv
448.572 437.74 448.323 438.297 447.83 438.692 cv
447.337 439.088 446.633 439.283 445.72 439.283 cv
445.413 439.283 445.1 439.254 444.773 439.19 cv
444.451 439.132 444.119 439.044 443.772 438.922 cv
443.772 437.97 li
444.046 438.131 444.343 438.248 444.671 438.331 cv
444.998 438.414 445.335 438.453 445.691 438.453 cv
446.311 438.453 446.78 438.331 447.102 438.087 cv
447.429 437.843 447.59 437.486 447.59 437.023 cv
447.59 436.593 447.439 436.256 447.136 436.017 cv
446.839 435.773 446.419 435.65 445.881 435.65 cv
445.032 435.65 li
445.032 434.84 li
445.921 434.84 li
446.404 434.84 446.775 434.742 447.034 434.552 cv
447.293 434.356 447.42 434.078 447.42 433.712 cv
447.42 433.336 447.288 433.053 447.019 432.853 cv
446.756 432.652 446.375 432.55 445.881 432.55 cv
445.613 432.55 445.32 432.579 445.012 432.638 cv
444.705 432.696 444.363 432.789 443.992 432.911 cv
443.992 432.032 li
444.368 431.93 444.714 431.852 445.042 431.798 cv
445.369 431.744 445.681 431.72 445.969 431.72 cv
446.716 431.72 447.312 431.891 447.747 432.232 cv
448.181 432.569 448.401 433.028 448.401 433.609 cv
448.401 434.015 448.284 434.356 448.054 434.635 cv
447.825 434.913 447.493 435.104 447.068 435.211 cv
ef
450.439 439.142 mo
451.469 439.142 li
451.469 437.901 li
450.439 437.901 li
cp
f
454.529 438.312 mo
457.971 438.312 li
457.971 439.142 li
453.342 439.142 li
453.342 438.312 li
453.718 437.926 454.226 437.404 454.871 436.754 cv
455.52 436.1 455.925 435.68 456.092 435.49 cv
456.409 435.133 456.629 434.835 456.751 434.591 cv
456.878 434.342 456.941 434.103 456.941 433.864 cv
456.941 433.478 456.804 433.161 456.531 432.916 cv
456.262 432.672 455.906 432.55 455.471 432.55 cv
455.164 432.55 454.837 432.604 454.49 432.711 cv
454.148 432.819 453.782 432.98 453.391 433.2 cv
453.391 432.204 li
453.787 432.042 454.158 431.925 454.505 431.842 cv
454.851 431.759 455.164 431.72 455.452 431.72 cv
456.209 431.72 456.809 431.911 457.258 432.287 cv
457.708 432.663 457.932 433.17 457.932 433.8 cv
457.932 434.098 457.874 434.386 457.761 434.655 cv
457.649 434.923 457.449 435.236 457.151 435.602 cv
457.068 435.695 456.809 435.968 456.375 436.422 cv
455.94 436.872 455.325 437.501 454.529 438.312 cv
ef
462.149 435.68 mo
461.68 435.68 461.309 435.807 461.041 436.056 cv
460.772 436.305 460.64 436.652 460.64 437.091 cv
460.64 437.531 460.772 437.877 461.041 438.126 cv
461.309 438.375 461.68 438.502 462.149 438.502 cv
462.618 438.502 462.989 438.375 463.257 438.126 cv
463.526 437.872 463.663 437.526 463.663 437.091 cv
463.663 436.652 463.526 436.305 463.257 436.056 cv
462.989 435.807 462.623 435.68 462.149 435.68 cv
461.163 435.26 mo
460.738 435.158 460.411 434.957 460.171 434.669 cv
459.937 434.381 459.82 434.025 459.82 433.61 cv
459.82 433.029 460.025 432.565 460.44 432.228 cv
460.855 431.891 461.426 431.72 462.149 431.72 cv
462.877 431.72 463.443 431.891 463.858 432.228 cv
464.273 432.565 464.478 433.029 464.478 433.61 cv
464.478 434.025 464.361 434.381 464.122 434.669 cv
463.887 434.957 463.56 435.158 463.14 435.26 cv
463.614 435.372 463.985 435.587 464.249 435.909 cv
464.517 436.232 464.649 436.627 464.649 437.091 cv
464.649 437.799 464.434 438.341 464 438.717 cv
463.57 439.093 462.955 439.284 462.149 439.284 cv
461.343 439.284 460.728 439.093 460.294 438.717 cv
459.864 438.341 459.649 437.799 459.649 437.091 cv
459.649 436.627 459.781 436.232 460.049 435.909 cv
460.318 435.587 460.689 435.372 461.163 435.26 cv
460.801 433.702 mo
460.801 434.078 460.919 434.376 461.153 434.586 cv
461.392 434.796 461.724 434.904 462.149 434.904 cv
462.574 434.904 462.901 434.796 463.14 434.586 cv
463.379 434.376 463.502 434.078 463.502 433.702 cv
463.502 433.326 463.379 433.029 463.14 432.819 cv
462.901 432.609 462.574 432.501 462.149 432.501 cv
461.724 432.501 461.392 432.609 461.153 432.819 cv
460.919 433.029 460.801 433.326 460.801 433.702 cv
ef
468.509 432.501 mo
468.001 432.501 467.62 432.75 467.362 433.253 cv
467.108 433.751 466.981 434.503 466.981 435.504 cv
466.981 436.505 467.108 437.252 467.362 437.755 cv
467.62 438.253 468.001 438.502 468.509 438.502 cv
469.022 438.502 469.403 438.253 469.656 437.755 cv
469.915 437.252 470.042 436.505 470.042 435.504 cv
470.042 434.503 469.915 433.751 469.656 433.253 cv
469.403 432.75 469.022 432.501 468.509 432.501 cv
468.509 431.72 mo
469.324 431.72 469.949 432.042 470.379 432.691 cv
470.814 433.336 471.029 434.273 471.029 435.504 cv
471.029 436.73 470.814 437.667 470.379 438.316 cv
469.949 438.961 469.324 439.283 468.509 439.283 cv
467.694 439.283 467.069 438.961 466.634 438.316 cv
466.204 437.667 465.989 436.73 465.989 435.504 cv
465.989 434.273 466.204 433.336 466.634 432.691 cv
467.069 432.042 467.694 431.72 468.509 431.72 cv
ef
478.961 435.934 mo
478.678 435.934 478.453 436.056 478.292 436.295 cv
478.131 436.535 478.053 436.871 478.053 437.301 cv
478.053 437.726 478.131 438.058 478.292 438.302 cv
478.453 438.541 478.678 438.663 478.961 438.663 cv
479.239 438.663 479.454 438.541 479.615 438.302 cv
479.776 438.058 479.859 437.726 479.859 437.301 cv
479.859 436.876 479.776 436.539 479.615 436.3 cv
479.454 436.056 479.239 435.934 478.961 435.934 cv
478.961 435.314 mo
479.474 435.314 479.884 435.495 480.187 435.851 cv
480.489 436.207 480.641 436.691 480.641 437.301 cv
480.641 437.912 480.489 438.395 480.182 438.751 cv
479.879 439.108 479.474 439.284 478.961 439.284 cv
478.439 439.284 478.028 439.108 477.726 438.751 cv
477.423 438.395 477.272 437.912 477.272 437.301 cv
477.272 436.691 477.423 436.207 477.726 435.851 cv
478.033 435.495 478.443 435.314 478.961 435.314 cv
473.922 432.34 mo
473.644 432.34 473.419 432.462 473.258 432.706 cv
473.097 432.946 473.019 433.278 473.019 433.703 cv
473.019 434.132 473.097 434.469 473.258 434.708 cv
473.419 434.948 473.639 435.07 473.922 435.07 cv
474.205 435.07 474.425 434.948 474.586 434.708 cv
474.747 434.469 474.83 434.132 474.83 433.703 cv
474.83 433.283 474.747 432.951 474.586 432.706 cv
474.425 432.462 474.2 432.34 473.922 432.34 cv
478.331 431.72 mo
479.112 431.72 li
474.552 439.284 li
473.771 439.284 li
478.331 431.72 li
473.922 431.72 mo
474.435 431.72 474.845 431.901 475.152 432.257 cv
475.46 432.614 475.611 433.092 475.611 433.703 cv
475.611 434.318 475.46 434.801 475.152 435.158 cv
474.85 435.514 474.44 435.69 473.922 435.69 cv
473.404 435.69 472.994 435.514 472.691 435.158 cv
472.394 434.801 472.242 434.313 472.242 433.703 cv
472.242 433.097 472.394 432.614 472.696 432.257 cv
472.999 431.901 473.409 431.72 473.922 431.72 cv
ef
562.479 445.233 mo
562.583 445.912 562.63 446.233 562.619 446.194 cv
@
563.461 441.802 mo
562.619 446.194 li
559.61 442.885 li
@
548.588 435.211 mo
549.062 435.314 549.428 435.523 549.692 435.841 cv
549.96 436.158 550.092 436.554 550.092 437.023 cv
550.092 437.74 549.843 438.297 549.35 438.692 cv
548.857 439.088 548.153 439.283 547.24 439.283 cv
546.933 439.283 546.62 439.254 546.293 439.19 cv
545.971 439.132 545.639 439.044 545.292 438.922 cv
545.292 437.97 li
545.566 438.131 545.863 438.248 546.191 438.331 cv
546.518 438.414 546.855 438.453 547.211 438.453 cv
547.831 438.453 548.3 438.331 548.622 438.087 cv
548.949 437.843 549.11 437.486 549.11 437.023 cv
549.11 436.593 548.959 436.256 548.656 436.017 cv
548.359 435.773 547.939 435.65 547.401 435.65 cv
546.552 435.65 li
546.552 434.84 li
547.441 434.84 li
547.924 434.84 548.295 434.742 548.554 434.552 cv
548.813 434.356 548.94 434.078 548.94 433.712 cv
548.94 433.336 548.808 433.053 548.539 432.853 cv
548.276 432.652 547.895 432.55 547.401 432.55 cv
547.133 432.55 546.84 432.579 546.532 432.638 cv
546.225 432.696 545.883 432.789 545.512 432.911 cv
545.512 432.032 li
545.888 431.93 546.234 431.852 546.562 431.798 cv
546.889 431.744 547.201 431.72 547.489 431.72 cv
548.236 431.72 548.832 431.891 549.267 432.232 cv
549.701 432.569 549.921 433.028 549.921 433.609 cv
549.921 434.015 549.804 434.356 549.574 434.635 cv
549.345 434.913 549.013 435.104 548.588 435.211 cv
ef
551.959 439.142 mo
552.989 439.142 li
552.989 437.901 li
551.959 437.901 li
cp
f
555.929 438.312 mo
559.371 438.312 li
559.371 439.142 li
554.742 439.142 li
554.742 438.312 li
555.118 437.926 555.626 437.404 556.271 436.754 cv
556.92 436.1 557.325 435.68 557.491 435.49 cv
557.809 435.133 558.029 434.835 558.151 434.591 cv
558.278 434.342 558.341 434.103 558.341 433.864 cv
558.341 433.478 558.204 433.161 557.931 432.916 cv
557.662 432.672 557.306 432.55 556.871 432.55 cv
556.564 432.55 556.237 432.604 555.89 432.711 cv
555.548 432.819 555.182 432.98 554.791 433.2 cv
554.791 432.204 li
555.187 432.042 555.558 431.925 555.905 431.842 cv
556.251 431.759 556.564 431.72 556.852 431.72 cv
557.609 431.72 558.209 431.911 558.658 432.287 cv
559.108 432.663 559.332 433.17 559.332 433.8 cv
559.332 434.098 559.274 434.386 559.161 434.655 cv
559.049 434.923 558.849 435.236 558.551 435.602 cv
558.468 435.695 558.209 435.968 557.775 436.422 cv
557.34 436.872 556.725 437.501 555.929 438.312 cv
ef
561.19 431.852 mo
565.878 431.852 li
565.878 432.272 li
563.231 439.142 li
562.201 439.142 li
564.691 432.682 li
561.19 432.682 li
561.19 431.852 li
ef
567.829 438.991 mo
567.829 438.093 li
568.078 438.21 568.327 438.298 568.581 438.361 cv
568.835 438.425 569.084 438.454 569.328 438.454 cv
569.977 438.454 570.475 438.234 570.817 437.8 cv
571.164 437.36 571.359 436.696 571.408 435.803 cv
571.218 436.081 570.978 436.296 570.69 436.447 cv
570.402 436.598 570.08 436.672 569.728 436.672 cv
569.001 436.672 568.42 436.452 567.995 436.012 cv
567.57 435.568 567.36 434.968 567.36 434.201 cv
567.36 433.454 567.58 432.853 568.024 432.399 cv
568.469 431.945 569.055 431.72 569.792 431.72 cv
570.637 431.72 571.276 432.043 571.721 432.692 cv
572.165 433.337 572.39 434.274 572.39 435.505 cv
572.39 436.652 572.116 437.57 571.569 438.259 cv
571.027 438.942 570.295 439.284 569.372 439.284 cv
569.123 439.284 568.874 439.26 568.62 439.211 cv
568.366 439.162 568.102 439.089 567.829 438.991 cv
569.792 435.9 mo
570.236 435.9 570.583 435.749 570.842 435.446 cv
571.1 435.143 571.232 434.728 571.232 434.201 cv
571.232 433.678 571.1 433.263 570.842 432.961 cv
570.583 432.653 570.236 432.502 569.792 432.502 cv
569.347 432.502 568.996 432.653 568.737 432.961 cv
568.478 433.263 568.351 433.678 568.351 434.201 cv
568.351 434.728 568.478 435.143 568.737 435.446 cv
568.996 435.749 569.347 435.9 569.792 435.9 cv
ef
580.361 435.934 mo
580.078 435.934 579.853 436.056 579.692 436.295 cv
579.531 436.535 579.453 436.871 579.453 437.301 cv
579.453 437.726 579.531 438.058 579.692 438.302 cv
579.853 438.541 580.078 438.663 580.361 438.663 cv
580.639 438.663 580.854 438.541 581.015 438.302 cv
581.176 438.058 581.259 437.726 581.259 437.301 cv
581.259 436.876 581.176 436.539 581.015 436.3 cv
580.854 436.056 580.639 435.934 580.361 435.934 cv
580.361 435.314 mo
580.874 435.314 581.284 435.495 581.587 435.851 cv
581.889 436.207 582.041 436.691 582.041 437.301 cv
582.041 437.912 581.889 438.395 581.582 438.751 cv
581.279 439.108 580.874 439.284 580.361 439.284 cv
579.839 439.284 579.428 439.108 579.126 438.751 cv
578.823 438.395 578.672 437.912 578.672 437.301 cv
578.672 436.691 578.823 436.207 579.126 435.851 cv
579.433 435.495 579.843 435.314 580.361 435.314 cv
575.322 432.34 mo
575.044 432.34 574.819 432.462 574.658 432.706 cv
574.497 432.946 574.419 433.278 574.419 433.703 cv
574.419 434.132 574.497 434.469 574.658 434.708 cv
574.819 434.948 575.039 435.07 575.322 435.07 cv
575.605 435.07 575.825 434.948 575.986 434.708 cv
576.147 434.469 576.23 434.132 576.23 433.703 cv
576.23 433.283 576.147 432.951 575.986 432.706 cv
575.825 432.462 575.6 432.34 575.322 432.34 cv
579.731 431.72 mo
580.512 431.72 li
575.952 439.284 li
575.171 439.284 li
579.731 431.72 li
575.322 431.72 mo
575.835 431.72 576.245 431.901 576.552 432.257 cv
576.86 432.614 577.011 433.092 577.011 433.703 cv
577.011 434.318 576.86 434.801 576.552 435.158 cv
576.25 435.514 575.84 435.69 575.322 435.69 cv
574.804 435.69 574.394 435.514 574.091 435.158 cv
573.794 434.801 573.642 434.313 573.642 433.703 cv
573.642 433.097 573.794 432.614 574.096 432.257 cv
574.399 431.901 574.809 431.72 575.322 431.72 cv
ef
107.824 15.0767 mo
108.118 15.1797 108.405 15.3907 108.685 15.7197 cv
108.966 16.0477 109.253 16.4987 109.533 17.0727 cv
110.934 19.8617 li
109.451 19.8617 li
108.145 17.2437 li
107.81 16.5597 107.482 16.1087 107.161 15.8837 cv
106.846 15.6577 106.416 15.5487 105.869 15.5487 cv
104.365 15.5487 li
104.365 19.8617 li
102.984 19.8617 li
102.984 9.6557 li
106.101 9.6557 li
107.27 9.6557 108.138 9.90173 108.713 10.3877 cv
109.287 10.8727 109.574 11.6107 109.574 12.5957 cv
109.574 13.2377 109.424 13.7707 109.123 14.1947 cv
108.829 14.6187 108.391 14.9127 107.824 15.0767 cv
104.365 10.7907 mo
104.365 14.4137 li
106.101 14.4137 li
106.764 14.4137 107.27 14.2637 107.605 13.9557 cv
107.947 13.6477 108.118 13.1897 108.118 12.5957 cv
108.118 12.0007 107.947 11.5497 107.605 11.2487 cv
107.27 10.9407 106.764 10.7907 106.101 10.7907 cv
104.365 10.7907 li
ef
118.598 15.7187 mo
118.598 16.3337 li
112.815 16.3337 li
112.869 17.2017 113.129 17.8587 113.594 18.3167 cv
114.066 18.7677 114.715 18.9927 115.549 18.9927 cv
116.035 18.9927 116.499 18.9317 116.951 18.8157 cv
117.409 18.6987 117.86 18.5217 118.304 18.2817 cv
118.304 19.4717 li
117.853 19.6627 117.388 19.8067 116.916 19.9087 cv
116.445 20.0117 115.959 20.0597 115.474 20.0597 cv
114.25 20.0597 113.286 19.7037 112.569 18.9927 cv
111.858 18.2817 111.502 17.3187 111.502 16.1087 cv
111.502 14.8577 111.837 13.8597 112.514 13.1277 cv
113.191 12.3897 114.107 12.0207 115.255 12.0207 cv
116.287 12.0207 117.101 12.3557 117.696 13.0187 cv
118.297 13.6817 118.598 14.5767 118.598 15.7187 cv
117.34 15.3497 mo
117.333 14.6587 117.135 14.1127 116.759 13.7017 cv
116.383 13.2917 115.891 13.0867 115.269 13.0867 cv
114.565 13.0867 114.004 13.2847 113.58 13.6817 cv
113.163 14.0777 112.917 14.6387 112.856 15.3567 cv
117.34 15.3497 li
ef
120.569 19.8617 mo
121.826 19.8617 li
121.826 9.22467 li
120.569 9.22467 li
cp
f
128.009 16.0127 mo
126.99 16.0127 126.286 16.1287 125.897 16.3617 cv
125.507 16.5937 125.309 16.9907 125.309 17.5507 cv
125.309 17.9947 125.452 18.3507 125.746 18.6167 cv
126.04 18.8767 126.444 19.0067 126.949 19.0067 cv
127.647 19.0067 128.207 18.7607 128.624 18.2687 cv
129.048 17.7697 129.26 17.1137 129.26 16.2927 cv
129.26 16.0127 li
128.009 16.0127 li
130.518 15.4927 mo
130.518 19.8617 li
129.26 19.8617 li
129.26 18.6997 li
128.973 19.1637 128.617 19.5057 128.187 19.7317 cv
127.756 19.9497 127.237 20.0597 126.614 20.0597 cv
125.828 20.0597 125.206 19.8407 124.741 19.4037 cv
124.283 18.9587 124.051 18.3707 124.051 17.6327 cv
124.051 16.7717 124.338 16.1217 124.912 15.6847 cv
125.493 15.2467 126.355 15.0287 127.496 15.0287 cv
129.26 15.0287 li
129.26 14.9057 li
129.26 14.3247 129.069 13.8797 128.686 13.5657 cv
128.31 13.2437 127.777 13.0867 127.086 13.0867 cv
126.649 13.0867 126.225 13.1417 125.808 13.2437 cv
125.391 13.3467 124.994 13.5037 124.612 13.7157 cv
124.612 12.5537 li
125.07 12.3757 125.521 12.2457 125.951 12.1577 cv
126.382 12.0687 126.806 12.0207 127.216 12.0207 cv
128.323 12.0207 129.151 12.3077 129.697 12.8817 cv
130.244 13.4557 130.518 14.3247 130.518 15.4927 cv
ef
134.293 10.0317 mo
134.293 12.2057 li
136.884 12.2057 li
136.884 13.1827 li
134.293 13.1827 li
134.293 17.3397 li
134.293 17.9617 134.375 18.3647 134.546 18.5427 cv
134.717 18.7197 135.065 18.8087 135.592 18.8087 cv
136.884 18.8087 li
136.884 19.8617 li
135.592 19.8617 li
134.621 19.8617 133.951 19.6837 133.582 19.3217 cv
133.213 18.9597 133.028 18.2967 133.028 17.3397 cv
133.028 13.1827 li
132.106 13.1827 li
132.106 12.2057 li
133.028 12.2057 li
133.028 10.0317 li
134.293 10.0317 li
ef
138.569 12.2057 mo
139.827 12.2057 li
139.827 19.8617 li
138.569 19.8617 li
138.569 12.2057 li
138.569 9.22571 mo
138.569 9.22571 mo
139.826 9.22571 li
139.826 10.8185 li
138.569 10.8185 li
cp
ef
145.376 13.0877 mo
144.699 13.0877 144.166 13.3547 143.776 13.8807 cv
143.387 14.4067 143.189 15.1247 143.189 16.0407 cv
143.189 16.9567 143.38 17.6817 143.77 18.2077 cv
144.159 18.7337 144.699 18.9937 145.376 18.9937 cv
146.046 18.9937 146.579 18.7277 146.969 18.2007 cv
147.358 17.6747 147.557 16.9497 147.557 16.0407 cv
147.557 15.1317 147.358 14.4137 146.969 13.8877 cv
146.579 13.3547 146.046 13.0877 145.376 13.0877 cv
145.376 12.0217 mo
146.47 12.0217 147.331 12.3767 147.953 13.0877 cv
148.575 13.7987 148.89 14.7827 148.89 16.0407 cv
148.89 17.2917 148.575 18.2757 147.953 18.9937 cv
147.331 19.7047 146.47 20.0607 145.376 20.0607 cv
144.275 20.0607 143.414 19.7047 142.792 18.9937 cv
142.17 18.2757 141.862 17.2917 141.862 16.0407 cv
141.862 14.7827 142.17 13.7987 142.792 13.0877 cv
143.414 12.3767 144.275 12.0217 145.376 12.0217 cv
ef
157.414 15.2407 mo
157.414 19.8617 li
156.156 19.8617 li
156.156 15.2817 li
156.156 14.5567 156.013 14.0167 155.732 13.6547 cv
155.452 13.2927 155.028 13.1147 154.461 13.1147 cv
153.784 13.1147 153.244 13.3337 152.854 13.7637 cv
152.465 14.1947 152.267 14.7897 152.267 15.5347 cv
152.267 19.8617 li
151.002 19.8617 li
151.002 12.2057 li
152.267 12.2057 li
152.267 13.3947 li
152.567 12.9367 152.923 12.5887 153.326 12.3627 cv
153.736 12.1367 154.208 12.0208 154.741 12.0208 cv
155.623 12.0208 156.286 12.2947 156.737 12.8417 cv
157.188 13.3817 157.414 14.1807 157.414 15.2407 cv
ef
164.81 12.4307 mo
164.81 13.6198 li
164.455 13.4357 164.085 13.2987 163.703 13.2097 cv
163.32 13.1207 162.923 13.0737 162.513 13.0737 cv
161.891 13.0737 161.419 13.1687 161.105 13.3607 cv
160.797 13.5517 160.64 13.8387 160.64 14.2217 cv
160.64 14.5157 160.749 14.7417 160.975 14.9117 cv
161.201 15.0767 161.645 15.2337 162.322 15.3837 cv
162.752 15.4797 li
163.648 15.6707 164.277 15.9447 164.653 16.2927 cv
165.029 16.6417 165.22 17.1267 165.22 17.7487 cv
165.22 18.4597 164.94 19.0208 164.373 19.4377 cv
163.812 19.8547 163.039 20.0598 162.055 20.0598 cv
161.645 20.0598 161.214 20.0187 160.77 19.9367 cv
160.326 19.8618 159.861 19.7387 159.369 19.5807 cv
159.369 18.2827 li
159.833 18.5217 160.291 18.7057 160.743 18.8287 cv
161.194 18.9457 161.638 19.0067 162.082 19.0067 cv
162.677 19.0067 163.128 18.9047 163.45 18.7057 cv
163.771 18.5007 163.928 18.2137 163.928 17.8447 cv
163.928 17.5027 163.812 17.2427 163.58 17.0587 cv
163.354 16.8737 162.848 16.7027 162.069 16.5327 cv
161.631 16.4297 li
160.852 16.2657 160.291 16.0127 159.943 15.6777 cv
159.594 15.3358 159.423 14.8707 159.423 14.2767 cv
159.423 13.5587 159.676 12.9977 160.189 12.6087 cv
160.702 12.2188 161.426 12.0208 162.363 12.0208 cv
162.828 12.0208 163.265 12.0547 163.675 12.1227 cv
164.085 12.1917 164.461 12.2937 164.81 12.4307 cv
ef
173.494 15.2407 mo
173.494 19.8617 li
172.236 19.8617 li
172.236 15.2817 li
172.236 14.5567 172.093 14.0167 171.812 13.6547 cv
171.532 13.2927 171.108 13.1147 170.541 13.1147 cv
169.864 13.1147 169.324 13.3337 168.934 13.7637 cv
168.545 14.1947 168.347 14.7897 168.347 15.5347 cv
168.347 19.8617 li
167.082 19.8617 li
167.082 9.22473 li
168.347 9.22473 li
168.347 13.3947 li
168.647 12.9367 169.003 12.5887 169.406 12.3627 cv
169.816 12.1367 170.288 12.0208 170.821 12.0208 cv
171.703 12.0208 172.366 12.2947 172.817 12.8417 cv
173.268 13.3817 173.494 14.1807 173.494 15.2407 cv
ef
176.009 12.2057 mo
177.267 12.2057 li
177.267 19.8617 li
176.009 19.8617 li
176.009 12.2057 li
176.009 9.22571 mo
176.009 9.22571 mo
177.266 9.22571 li
177.266 10.8185 li
176.009 10.8185 li
cp
ef
181.186 18.7137 mo
181.186 22.7747 li
179.921 22.7747 li
179.921 12.2057 li
181.186 12.2057 li
181.186 13.3677 li
181.453 12.9097 181.781 12.5747 182.184 12.3567 cv
182.587 12.1307 183.073 12.0217 183.633 12.0217 cv
184.563 12.0217 185.315 12.3907 185.896 13.1287 cv
186.477 13.8667 186.771 14.8377 186.771 16.0407 cv
186.771 17.2437 186.477 18.2147 185.896 18.9527 cv
185.315 19.6917 184.563 20.0607 183.633 20.0607 cv
183.073 20.0607 182.587 19.9507 182.184 19.7327 cv
181.781 19.5067 181.453 19.1717 181.186 18.7137 cv
185.465 16.0407 mo
185.465 15.1177 185.274 14.3937 184.891 13.8667 cv
184.515 13.3407 183.989 13.0737 183.326 13.0737 cv
182.663 13.0737 182.136 13.3407 181.753 13.8667 cv
181.377 14.3937 181.186 15.1177 181.186 16.0407 cv
181.186 16.9637 181.377 17.6947 181.753 18.2217 cv
182.136 18.7477 182.663 19.0077 183.326 19.0077 cv
183.989 19.0077 184.515 18.7477 184.891 18.2217 cv
185.274 17.6947 185.465 16.9637 185.465 16.0407 cv
ef
194.725 14.9877 mo
194.725 18.7267 li
196.94 18.7267 li
197.685 18.7267 198.232 18.5767 198.587 18.2687 cv
198.95 17.9617 199.127 17.4897 199.127 16.8538 cv
199.127 16.2177 198.95 15.7467 198.587 15.4457 cv
198.232 15.1378 197.685 14.9877 196.94 14.9877 cv
194.725 14.9877 li
194.725 10.7907 mo
194.725 13.8668 li
196.769 13.8668 li
197.446 13.8668 197.945 13.7437 198.273 13.4907 cv
198.608 13.2377 198.772 12.8477 198.772 12.3287 cv
198.772 11.8157 198.608 11.4257 198.273 11.1737 cv
197.945 10.9207 197.446 10.7907 196.769 10.7907 cv
194.725 10.7907 li
193.344 9.65576 mo
196.871 9.65576 li
197.924 9.65576 198.738 9.87476 199.305 10.3117 cv
199.872 10.7498 200.16 11.3717 200.16 12.1777 cv
200.16 12.7997 200.016 13.2997 199.722 13.6688 cv
199.428 14.0377 199.004 14.2697 198.437 14.3587 cv
199.114 14.5027 199.64 14.8098 200.016 15.2747 cv
200.392 15.7327 200.583 16.3137 200.583 17.0048 cv
200.583 17.9138 200.276 18.6177 199.654 19.1168 cv
199.032 19.6157 198.15 19.8618 197.008 19.8618 cv
193.344 19.8618 li
193.344 9.65576 li
ef
209.438 15.7187 mo
209.438 16.3337 li
203.655 16.3337 li
203.709 17.2017 203.969 17.8587 204.434 18.3167 cv
204.906 18.7677 205.555 18.9927 206.389 18.9927 cv
206.875 18.9927 207.339 18.9317 207.791 18.8157 cv
208.249 18.6987 208.7 18.5217 209.144 18.2817 cv
209.144 19.4717 li
208.693 19.6627 208.228 19.8067 207.756 19.9087 cv
207.285 20.0117 206.799 20.0597 206.314 20.0597 cv
205.09 20.0597 204.126 19.7037 203.409 18.9927 cv
202.698 18.2817 202.342 17.3187 202.342 16.1087 cv
202.342 14.8577 202.677 13.8597 203.354 13.1277 cv
204.031 12.3897 204.947 12.0207 206.095 12.0207 cv
207.127 12.0207 207.941 12.3557 208.536 13.0187 cv
209.137 13.6817 209.438 14.5767 209.438 15.7187 cv
208.18 15.3497 mo
208.173 14.6587 207.975 14.1127 207.599 13.7017 cv
207.223 13.2917 206.731 13.0867 206.109 13.0867 cv
205.405 13.0867 204.844 13.2847 204.42 13.6817 cv
204.003 14.0777 203.757 14.6387 203.696 15.3567 cv
208.18 15.3497 li
ef
212.773 10.0317 mo
212.773 12.2057 li
215.364 12.2057 li
215.364 13.1827 li
212.773 13.1827 li
212.773 17.3397 li
212.773 17.9617 212.855 18.3647 213.026 18.5427 cv
213.197 18.7197 213.545 18.8087 214.072 18.8087 cv
215.364 18.8087 li
215.364 19.8617 li
214.072 19.8617 li
213.101 19.8617 212.431 19.6837 212.062 19.3217 cv
211.693 18.9597 211.508 18.2967 211.508 17.3397 cv
211.508 13.1827 li
210.586 13.1827 li
210.586 12.2057 li
211.508 12.2057 li
211.508 10.0317 li
212.773 10.0317 li
ef
216.318 12.2057 mo
217.576 12.2057 li
219.148 18.1807 li
220.714 12.2057 li
222.197 12.2057 li
223.769 18.1807 li
225.335 12.2057 li
226.592 12.2057 li
224.589 19.8617 li
223.106 19.8617 li
221.459 13.5867 li
219.804 19.8617 li
218.321 19.8617 li
216.318 12.2057 li
ef
234.998 15.7187 mo
234.998 16.3337 li
229.215 16.3337 li
229.269 17.2017 229.529 17.8587 229.994 18.3167 cv
230.466 18.7677 231.115 18.9927 231.949 18.9927 cv
232.435 18.9927 232.899 18.9317 233.351 18.8157 cv
233.809 18.6987 234.26 18.5217 234.704 18.2817 cv
234.704 19.4717 li
234.253 19.6627 233.788 19.8067 233.316 19.9087 cv
232.845 20.0117 232.359 20.0597 231.874 20.0597 cv
230.65 20.0597 229.686 19.7037 228.969 18.9927 cv
228.258 18.2817 227.902 17.3187 227.902 16.1087 cv
227.902 14.8577 228.237 13.8597 228.914 13.1277 cv
229.591 12.3897 230.507 12.0207 231.655 12.0207 cv
232.687 12.0207 233.501 12.3557 234.096 13.0187 cv
234.697 13.6817 234.998 14.5767 234.998 15.7187 cv
233.74 15.3497 mo
233.733 14.6587 233.535 14.1127 233.159 13.7017 cv
232.783 13.2917 232.291 13.0867 231.669 13.0867 cv
230.965 13.0867 230.404 13.2847 229.98 13.6817 cv
229.563 14.0777 229.317 14.6387 229.256 15.3567 cv
233.74 15.3497 li
ef
243.638 15.7187 mo
243.638 16.3337 li
237.855 16.3337 li
237.909 17.2017 238.169 17.8587 238.634 18.3167 cv
239.106 18.7677 239.755 18.9927 240.589 18.9927 cv
241.075 18.9927 241.539 18.9317 241.991 18.8157 cv
242.449 18.6987 242.9 18.5217 243.344 18.2817 cv
243.344 19.4717 li
242.893 19.6627 242.428 19.8067 241.956 19.9087 cv
241.485 20.0117 240.999 20.0597 240.514 20.0597 cv
239.29 20.0597 238.326 19.7037 237.609 18.9927 cv
236.898 18.2817 236.542 17.3187 236.542 16.1087 cv
236.542 14.8577 236.877 13.8597 237.554 13.1277 cv
238.231 12.3897 239.147 12.0207 240.295 12.0207 cv
241.327 12.0207 242.141 12.3557 242.736 13.0187 cv
243.337 13.6817 243.638 14.5767 243.638 15.7187 cv
242.38 15.3497 mo
242.373 14.6587 242.175 14.1127 241.799 13.7017 cv
241.423 13.2917 240.931 13.0867 240.309 13.0867 cv
239.605 13.0867 239.044 13.2847 238.62 13.6817 cv
238.203 14.0777 237.957 14.6387 237.896 15.3567 cv
242.38 15.3497 li
ef
252.094 15.2407 mo
252.094 19.8617 li
250.836 19.8617 li
250.836 15.2817 li
250.836 14.5567 250.693 14.0167 250.412 13.6547 cv
250.132 13.2927 249.708 13.1147 249.141 13.1147 cv
248.464 13.1147 247.924 13.3337 247.534 13.7637 cv
247.145 14.1947 246.947 14.7897 246.947 15.5347 cv
246.947 19.8617 li
245.682 19.8617 li
245.682 12.2057 li
246.947 12.2057 li
246.947 13.3947 li
247.247 12.9367 247.603 12.5887 248.006 12.3627 cv
248.416 12.1367 248.888 12.0208 249.421 12.0208 cv
250.303 12.0208 250.966 12.2947 251.417 12.8417 cv
251.868 13.3817 252.094 14.1807 252.094 15.2407 cv
ef
266.747 10.4417 mo
266.747 11.8977 li
266.282 11.4667 265.783 11.1387 265.257 10.9267 cv
264.73 10.7147 264.177 10.6057 263.582 10.6057 cv
262.413 10.6057 261.524 10.9617 260.902 11.6787 cv
260.28 12.3897 259.973 13.4217 259.973 14.7687 cv
259.973 16.1157 260.28 17.1407 260.902 17.8587 cv
261.524 18.5697 262.413 18.9247 263.582 18.9247 cv
264.177 18.9247 264.73 18.8157 265.257 18.6037 cv
265.783 18.3917 266.282 18.0637 266.747 17.6327 cv
266.747 19.0757 li
266.262 19.4037 265.749 19.6497 265.209 19.8137 cv
264.669 19.9777 264.101 20.0597 263.5 20.0597 cv
261.955 20.0597 260.738 19.5877 259.85 18.6447 cv
258.961 17.6947 258.517 16.4027 258.517 14.7687 cv
258.517 13.1287 258.961 11.8367 259.85 10.8927 cv
260.738 9.94269 261.955 9.4707 263.5 9.4707 cv
264.108 9.4707 264.683 9.55273 265.223 9.71674 cv
265.763 9.87469 266.275 10.1207 266.747 10.4417 cv
ef
271.736 13.0877 mo
271.059 13.0877 270.526 13.3547 270.136 13.8807 cv
269.747 14.4067 269.549 15.1247 269.549 16.0407 cv
269.549 16.9567 269.74 17.6817 270.13 18.2077 cv
270.519 18.7337 271.059 18.9937 271.736 18.9937 cv
272.406 18.9937 272.939 18.7277 273.329 18.2007 cv
273.718 17.6747 273.917 16.9497 273.917 16.0407 cv
273.917 15.1317 273.718 14.4137 273.329 13.8877 cv
272.939 13.3547 272.406 13.0877 271.736 13.0877 cv
271.736 12.0217 mo
272.83 12.0217 273.691 12.3767 274.313 13.0877 cv
274.935 13.7987 275.25 14.7827 275.25 16.0407 cv
275.25 17.2917 274.935 18.2757 274.313 18.9937 cv
273.691 19.7047 272.83 20.0607 271.736 20.0607 cv
270.635 20.0607 269.774 19.7047 269.152 18.9937 cv
268.53 18.2757 268.222 17.2917 268.222 16.0407 cv
268.222 14.7827 268.53 13.7987 269.152 13.0877 cv
269.774 12.3767 270.635 12.0217 271.736 12.0217 cv
ef
283.25 13.6747 mo
283.564 13.1077 283.94 12.6907 284.378 12.4237 cv
284.815 12.1567 285.328 12.0207 285.923 12.0207 cv
286.723 12.0207 287.338 12.3007 287.769 12.8617 cv
288.199 13.4147 288.418 14.2077 288.418 15.2397 cv
288.418 19.8617 li
287.153 19.8617 li
287.153 15.2807 li
287.153 14.5497 287.023 14.0027 286.764 13.6477 cv
286.504 13.2917 286.107 13.1137 285.574 13.1137 cv
284.925 13.1137 284.405 13.3327 284.029 13.7637 cv
283.653 14.1947 283.462 14.7887 283.462 15.5337 cv
283.462 19.8617 li
282.197 19.8617 li
282.197 15.2807 li
282.197 14.5427 282.067 13.9957 281.808 13.6477 cv
281.548 13.2917 281.145 13.1137 280.604 13.1137 cv
279.962 13.1137 279.449 13.3327 279.073 13.7707 cv
278.697 14.2007 278.506 14.7887 278.506 15.5337 cv
278.506 19.8617 li
277.241 19.8617 li
277.241 12.2047 li
278.506 12.2047 li
278.506 13.3947 li
278.793 12.9227 279.135 12.5807 279.538 12.3557 cv
279.941 12.1297 280.413 12.0207 280.967 12.0207 cv
281.521 12.0207 281.992 12.1637 282.382 12.4447 cv
282.771 12.7247 283.065 13.1347 283.25 13.6747 cv
ef
296.93 13.6747 mo
297.244 13.1077 297.62 12.6907 298.058 12.4237 cv
298.495 12.1567 299.008 12.0207 299.603 12.0207 cv
300.403 12.0207 301.018 12.3007 301.449 12.8617 cv
301.879 13.4147 302.098 14.2077 302.098 15.2397 cv
302.098 19.8617 li
300.833 19.8617 li
300.833 15.2807 li
300.833 14.5497 300.703 14.0027 300.444 13.6477 cv
300.184 13.2917 299.787 13.1137 299.254 13.1137 cv
298.605 13.1137 298.085 13.3327 297.709 13.7637 cv
297.333 14.1947 297.142 14.7887 297.142 15.5337 cv
297.142 19.8617 li
295.877 19.8617 li
295.877 15.2807 li
295.877 14.5427 295.747 13.9957 295.488 13.6477 cv
295.228 13.2917 294.825 13.1137 294.284 13.1137 cv
293.642 13.1137 293.129 13.3327 292.753 13.7707 cv
292.377 14.2007 292.186 14.7887 292.186 15.5337 cv
292.186 19.8617 li
290.921 19.8617 li
290.921 12.2047 li
292.186 12.2047 li
292.186 13.3947 li
292.473 12.9227 292.815 12.5807 293.218 12.3557 cv
293.621 12.1297 294.093 12.0207 294.647 12.0207 cv
295.201 12.0207 295.672 12.1637 296.062 12.4447 cv
296.451 12.7247 296.745 13.1347 296.93 13.6747 cv
ef
308.129 16.0127 mo
307.11 16.0127 306.406 16.1287 306.017 16.3617 cv
305.627 16.5937 305.429 16.9907 305.429 17.5507 cv
305.429 17.9947 305.572 18.3507 305.866 18.6167 cv
306.16 18.8767 306.564 19.0067 307.069 19.0067 cv
307.767 19.0067 308.327 18.7607 308.744 18.2687 cv
309.168 17.7697 309.38 17.1137 309.38 16.2927 cv
309.38 16.0127 li
308.129 16.0127 li
310.638 15.4927 mo
310.638 19.8617 li
309.38 19.8617 li
309.38 18.6997 li
309.093 19.1637 308.737 19.5057 308.307 19.7317 cv
307.876 19.9497 307.357 20.0597 306.734 20.0597 cv
305.948 20.0597 305.326 19.8407 304.861 19.4037 cv
304.403 18.9587 304.171 18.3707 304.171 17.6327 cv
304.171 16.7717 304.458 16.1217 305.032 15.6847 cv
305.613 15.2467 306.475 15.0287 307.616 15.0287 cv
309.38 15.0287 li
309.38 14.9057 li
309.38 14.3247 309.189 13.8797 308.806 13.5657 cv
308.43 13.2437 307.897 13.0867 307.206 13.0867 cv
306.769 13.0867 306.345 13.1417 305.928 13.2437 cv
305.511 13.3467 305.114 13.5037 304.732 13.7157 cv
304.732 12.5537 li
305.19 12.3757 305.641 12.2457 306.071 12.1577 cv
306.502 12.0687 306.926 12.0207 307.336 12.0207 cv
308.443 12.0207 309.271 12.3077 309.817 12.8817 cv
310.364 13.4557 310.638 14.3247 310.638 15.4927 cv
ef
319.534 15.2407 mo
319.534 19.8617 li
318.276 19.8617 li
318.276 15.2817 li
318.276 14.5567 318.133 14.0167 317.852 13.6547 cv
317.572 13.2927 317.148 13.1147 316.581 13.1147 cv
315.904 13.1147 315.364 13.3337 314.974 13.7637 cv
314.585 14.1947 314.387 14.7897 314.387 15.5347 cv
314.387 19.8617 li
313.122 19.8617 li
313.122 12.2057 li
314.387 12.2057 li
314.387 13.3947 li
314.687 12.9367 315.043 12.5887 315.446 12.3627 cv
315.856 12.1367 316.328 12.0208 316.861 12.0208 cv
317.743 12.0208 318.406 12.2947 318.857 12.8417 cv
319.308 13.3817 319.534 14.1807 319.534 15.2407 cv
ef
327.087 13.3677 mo
327.087 9.22467 li
328.345 9.22467 li
328.345 19.8617 li
327.087 19.8617 li
327.087 18.7137 li
326.82 19.1717 326.485 19.5067 326.082 19.7317 cv
325.679 19.9507 325.2 20.0597 324.633 20.0597 cv
323.71 20.0597 322.951 19.6907 322.37 18.9527 cv
321.789 18.2147 321.502 17.2437 321.502 16.0406 cv
321.502 14.8376 321.789 13.8667 322.37 13.1287 cv
322.951 12.3896 323.71 12.0207 324.633 12.0207 cv
325.2 12.0207 325.679 12.1307 326.082 12.3557 cv
326.485 12.5746 326.82 12.9097 327.087 13.3677 cv
322.801 16.0406 mo
322.801 16.9637 322.992 17.6947 323.368 18.2217 cv
323.751 18.7477 324.277 19.0077 324.941 19.0077 cv
325.604 19.0077 326.13 18.7477 326.513 18.2217 cv
326.896 17.6947 327.087 16.9637 327.087 16.0406 cv
327.087 15.1177 326.896 14.3927 326.513 13.8667 cv
326.13 13.3407 325.604 13.0737 324.941 13.0737 cv
324.277 13.0737 323.751 13.3407 323.368 13.8667 cv
322.992 14.3927 322.801 15.1177 322.801 16.0406 cv
ef
335.424 9.6557 mo
341.877 9.6557 li
341.877 10.8177 li
336.805 10.8177 li
336.805 13.8397 li
341.665 13.8397 li
341.665 15.0017 li
336.805 15.0017 li
336.805 18.6997 li
342 18.6997 li
342 19.8617 li
335.424 19.8617 li
335.424 9.6557 li
ef
350.614 12.2057 mo
347.845 15.9317 li
350.758 19.8617 li
349.274 19.8617 li
347.046 16.8537 li
344.817 19.8617 li
343.334 19.8617 li
346.307 15.8557 li
343.587 12.2057 li
345.07 12.2057 li
347.1 14.9337 li
349.131 12.2057 li
350.614 12.2057 li
ef
358.718 15.7187 mo
358.718 16.3337 li
352.935 16.3337 li
352.989 17.2017 353.249 17.8587 353.714 18.3167 cv
354.186 18.7677 354.835 18.9927 355.669 18.9927 cv
356.155 18.9927 356.619 18.9317 357.071 18.8157 cv
357.529 18.6987 357.98 18.5217 358.424 18.2817 cv
358.424 19.4717 li
357.973 19.6627 357.508 19.8067 357.036 19.9087 cv
356.565 20.0117 356.079 20.0597 355.594 20.0597 cv
354.37 20.0597 353.406 19.7037 352.689 18.9927 cv
351.978 18.2817 351.622 17.3187 351.622 16.1087 cv
351.622 14.8577 351.957 13.8597 352.634 13.1277 cv
353.311 12.3897 354.227 12.0207 355.375 12.0207 cv
356.407 12.0207 357.221 12.3557 357.816 13.0187 cv
358.417 13.6817 358.718 14.5767 358.718 15.7187 cv
357.46 15.3497 mo
357.453 14.6587 357.255 14.1127 356.879 13.7017 cv
356.503 13.2917 356.011 13.0867 355.389 13.0867 cv
354.685 13.0867 354.124 13.2847 353.7 13.6817 cv
353.283 14.0777 353.037 14.6387 352.976 15.3567 cv
357.46 15.3497 li
ef
366.319 12.4997 mo
366.319 13.6757 li
365.964 13.4777 365.608 13.3337 365.246 13.2377 cv
364.89 13.1357 364.528 13.0877 364.166 13.0877 cv
363.352 13.0877 362.716 13.3477 362.265 13.8667 cv
361.814 14.3797 361.589 15.1037 361.589 16.0407 cv
361.589 16.9777 361.814 17.7017 362.265 18.2217 cv
362.716 18.7337 363.352 18.9937 364.166 18.9937 cv
364.528 18.9937 364.89 18.9457 365.246 18.8507 cv
365.608 18.7477 365.964 18.6037 366.319 18.4057 cv
366.319 19.5677 li
365.97 19.7317 365.601 19.8547 365.225 19.9367 cv
364.849 20.0197 364.453 20.0607 364.029 20.0607 cv
362.874 20.0607 361.958 19.6977 361.281 18.9737 cv
360.604 18.2487 360.262 17.2707 360.262 16.0407 cv
360.262 14.7897 360.604 13.8117 361.288 13.0947 cv
361.978 12.3767 362.915 12.0207 364.111 12.0207 cv
364.501 12.0207 364.877 12.0617 365.246 12.1447 cv
365.615 12.2197 365.97 12.3427 366.319 12.4997 cv
ef
368.359 16.8407 mo
368.359 12.2057 li
369.617 12.2057 li
369.617 16.7927 li
369.617 17.5177 369.76 18.0647 370.041 18.4267 cv
370.321 18.7887 370.745 18.9667 371.312 18.9667 cv
371.989 18.9667 372.529 18.7477 372.919 18.3177 cv
373.315 17.8867 373.513 17.2917 373.513 16.5467 cv
373.513 12.2057 li
374.771 12.2057 li
374.771 19.8617 li
373.513 19.8617 li
373.513 18.6867 li
373.206 19.1517 372.85 19.4997 372.447 19.7257 cv
372.044 19.9507 371.579 20.0607 371.046 20.0607 cv
370.164 20.0607 369.501 19.7867 369.043 19.2397 cv
368.585 18.6937 368.359 17.8937 368.359 16.8407 cv
371.524 12.0217 mo
371.524 12.0217 li
ef
378.613 10.0317 mo
378.613 12.2057 li
381.204 12.2057 li
381.204 13.1827 li
378.613 13.1827 li
378.613 17.3397 li
378.613 17.9617 378.695 18.3647 378.866 18.5427 cv
379.037 18.7197 379.385 18.8087 379.912 18.8087 cv
381.204 18.8087 li
381.204 19.8617 li
379.912 19.8617 li
378.941 19.8617 378.271 19.6837 377.902 19.3217 cv
377.533 18.9597 377.348 18.2967 377.348 17.3397 cv
377.348 13.1827 li
376.426 13.1827 li
376.426 12.2057 li
377.348 12.2057 li
377.348 10.0317 li
378.613 10.0317 li
ef
382.769 12.2057 mo
384.027 12.2057 li
384.027 19.8617 li
382.769 19.8617 li
382.769 12.2057 li
382.769 9.22571 mo
382.769 9.22571 mo
384.026 9.22571 li
384.026 10.8185 li
382.769 10.8185 li
cp
ef
389.696 13.0877 mo
389.019 13.0877 388.486 13.3547 388.096 13.8807 cv
387.707 14.4067 387.509 15.1247 387.509 16.0407 cv
387.509 16.9567 387.7 17.6817 388.09 18.2077 cv
388.479 18.7337 389.019 18.9937 389.696 18.9937 cv
390.366 18.9937 390.899 18.7277 391.289 18.2007 cv
391.678 17.6747 391.877 16.9497 391.877 16.0407 cv
391.877 15.1317 391.678 14.4137 391.289 13.8877 cv
390.899 13.3547 390.366 13.0877 389.696 13.0877 cv
389.696 12.0217 mo
390.79 12.0217 391.651 12.3767 392.273 13.0877 cv
392.895 13.7987 393.21 14.7827 393.21 16.0407 cv
393.21 17.2917 392.895 18.2757 392.273 18.9937 cv
391.651 19.7047 390.79 20.0607 389.696 20.0607 cv
388.595 20.0607 387.734 19.7047 387.112 18.9937 cv
386.49 18.2757 386.182 17.2917 386.182 16.0407 cv
386.182 14.7827 386.49 13.7987 387.112 13.0877 cv
387.734 12.3767 388.595 12.0217 389.696 12.0217 cv
ef
401.614 15.2407 mo
401.614 19.8617 li
400.356 19.8617 li
400.356 15.2817 li
400.356 14.5567 400.213 14.0167 399.932 13.6547 cv
399.652 13.2927 399.228 13.1147 398.661 13.1147 cv
397.984 13.1147 397.444 13.3337 397.054 13.7637 cv
396.665 14.1947 396.467 14.7897 396.467 15.5347 cv
396.467 19.8617 li
395.202 19.8617 li
395.202 12.2057 li
396.467 12.2057 li
396.467 13.3947 li
396.767 12.9367 397.123 12.5887 397.526 12.3627 cv
397.936 12.1367 398.408 12.0208 398.941 12.0208 cv
399.823 12.0208 400.486 12.2947 400.937 12.8417 cv
401.388 13.3817 401.614 14.1807 401.614 15.2407 cv
ef
416.267 10.4417 mo
416.267 11.8977 li
415.802 11.4667 415.303 11.1387 414.777 10.9267 cv
414.25 10.7147 413.697 10.6057 413.102 10.6057 cv
411.933 10.6057 411.044 10.9617 410.422 11.6787 cv
409.8 12.3897 409.493 13.4217 409.493 14.7687 cv
409.493 16.1157 409.8 17.1407 410.422 17.8587 cv
411.044 18.5697 411.933 18.9247 413.102 18.9247 cv
413.697 18.9247 414.25 18.8157 414.777 18.6037 cv
415.303 18.3917 415.802 18.0637 416.267 17.6327 cv
416.267 19.0757 li
415.782 19.4037 415.269 19.6497 414.729 19.8137 cv
414.189 19.9777 413.621 20.0597 413.02 20.0597 cv
411.475 20.0597 410.258 19.5877 409.37 18.6447 cv
408.481 17.6947 408.037 16.4027 408.037 14.7687 cv
408.037 13.1287 408.481 11.8367 409.37 10.8927 cv
410.258 9.94269 411.475 9.4707 413.02 9.4707 cv
413.628 9.4707 414.203 9.55273 414.743 9.71674 cv
415.283 9.87469 415.795 10.1207 416.267 10.4417 cv
ef
421.376 13.0877 mo
420.699 13.0877 420.166 13.3547 419.776 13.8807 cv
419.387 14.4067 419.189 15.1247 419.189 16.0407 cv
419.189 16.9567 419.38 17.6817 419.77 18.2077 cv
420.159 18.7337 420.699 18.9937 421.376 18.9937 cv
422.046 18.9937 422.579 18.7277 422.969 18.2007 cv
423.358 17.6747 423.557 16.9497 423.557 16.0407 cv
423.557 15.1317 423.358 14.4137 422.969 13.8877 cv
422.579 13.3547 422.046 13.0877 421.376 13.0877 cv
421.376 12.0217 mo
422.47 12.0217 423.331 12.3767 423.953 13.0877 cv
424.575 13.7987 424.89 14.7827 424.89 16.0407 cv
424.89 17.2917 424.575 18.2757 423.953 18.9937 cv
423.331 19.7047 422.47 20.0607 421.376 20.0607 cv
420.275 20.0607 419.414 19.7047 418.792 18.9937 cv
418.17 18.2757 417.862 17.2917 417.862 16.0407 cv
417.862 14.7827 418.17 13.7987 418.792 13.0877 cv
419.414 12.3767 420.275 12.0217 421.376 12.0217 cv
ef
426.799 16.8407 mo
426.799 12.2057 li
428.057 12.2057 li
428.057 16.7927 li
428.057 17.5177 428.2 18.0647 428.481 18.4267 cv
428.761 18.7887 429.185 18.9667 429.752 18.9667 cv
430.429 18.9667 430.969 18.7477 431.359 18.3177 cv
431.755 17.8867 431.953 17.2917 431.953 16.5467 cv
431.953 12.2057 li
433.211 12.2057 li
433.211 19.8617 li
431.953 19.8617 li
431.953 18.6867 li
431.646 19.1517 431.29 19.4997 430.887 19.7257 cv
430.484 19.9507 430.019 20.0607 429.486 20.0607 cv
428.604 20.0607 427.941 19.7867 427.483 19.2397 cv
427.025 18.6937 426.799 17.8937 426.799 16.8407 cv
429.964 12.0217 mo
429.964 12.0217 li
ef
442.174 15.2407 mo
442.174 19.8617 li
440.916 19.8617 li
440.916 15.2817 li
440.916 14.5567 440.773 14.0167 440.492 13.6547 cv
440.212 13.2927 439.788 13.1147 439.221 13.1147 cv
438.544 13.1147 438.004 13.3337 437.614 13.7637 cv
437.225 14.1947 437.027 14.7897 437.027 15.5347 cv
437.027 19.8617 li
435.762 19.8617 li
435.762 12.2057 li
437.027 12.2057 li
437.027 13.3947 li
437.327 12.9367 437.683 12.5887 438.086 12.3627 cv
438.496 12.1367 438.968 12.0208 439.501 12.0208 cv
440.383 12.0208 441.046 12.2947 441.497 12.8417 cv
441.948 13.3817 442.174 14.1807 442.174 15.2407 cv
ef
445.933 10.0317 mo
445.933 12.2057 li
448.524 12.2057 li
448.524 13.1827 li
445.933 13.1827 li
445.933 17.3397 li
445.933 17.9617 446.015 18.3647 446.186 18.5427 cv
446.357 18.7197 446.705 18.8087 447.232 18.8087 cv
448.524 18.8087 li
448.524 19.8617 li
447.232 19.8617 li
446.261 19.8617 445.591 19.6837 445.222 19.3217 cv
444.853 18.9597 444.668 18.2967 444.668 17.3397 cv
444.668 13.1827 li
443.746 13.1827 li
443.746 12.2057 li
444.668 12.2057 li
444.668 10.0317 li
445.933 10.0317 li
ef
458.129 16.0127 mo
457.11 16.0127 456.406 16.1287 456.017 16.3617 cv
455.627 16.5937 455.429 16.9907 455.429 17.5507 cv
455.429 17.9947 455.572 18.3507 455.866 18.6167 cv
456.16 18.8767 456.564 19.0067 457.069 19.0067 cv
457.767 19.0067 458.327 18.7607 458.744 18.2687 cv
459.168 17.7697 459.38 17.1137 459.38 16.2927 cv
459.38 16.0127 li
458.129 16.0127 li
460.638 15.4927 mo
460.638 19.8617 li
459.38 19.8617 li
459.38 18.6997 li
459.093 19.1637 458.737 19.5057 458.307 19.7317 cv
457.876 19.9497 457.357 20.0597 456.734 20.0597 cv
455.948 20.0597 455.326 19.8407 454.861 19.4037 cv
454.403 18.9587 454.171 18.3707 454.171 17.6327 cv
454.171 16.7717 454.458 16.1217 455.032 15.6847 cv
455.613 15.2467 456.475 15.0287 457.616 15.0287 cv
459.38 15.0287 li
459.38 14.9057 li
459.38 14.3247 459.189 13.8797 458.806 13.5657 cv
458.43 13.2437 457.897 13.0867 457.206 13.0867 cv
456.769 13.0867 456.345 13.1417 455.928 13.2437 cv
455.511 13.3467 455.114 13.5037 454.732 13.7157 cv
454.732 12.5537 li
455.19 12.3757 455.641 12.2457 456.071 12.1577 cv
456.502 12.0687 456.926 12.0207 457.336 12.0207 cv
458.443 12.0207 459.271 12.3077 459.817 12.8817 cv
460.364 13.4557 460.638 14.3247 460.638 15.4927 cv
ef
469.534 15.2407 mo
469.534 19.8617 li
468.276 19.8617 li
468.276 15.2817 li
468.276 14.5567 468.133 14.0167 467.852 13.6547 cv
467.572 13.2927 467.148 13.1147 466.581 13.1147 cv
465.904 13.1147 465.364 13.3337 464.974 13.7637 cv
464.585 14.1947 464.387 14.7897 464.387 15.5347 cv
464.387 19.8617 li
463.122 19.8617 li
463.122 12.2057 li
464.387 12.2057 li
464.387 13.3947 li
464.687 12.9367 465.043 12.5887 465.446 12.3627 cv
465.856 12.1367 466.328 12.0208 466.861 12.0208 cv
467.743 12.0208 468.406 12.2947 468.857 12.8417 cv
469.308 13.3817 469.534 14.1807 469.534 15.2407 cv
ef
477.087 13.3677 mo
477.087 9.22467 li
478.345 9.22467 li
478.345 19.8617 li
477.087 19.8617 li
477.087 18.7137 li
476.82 19.1717 476.485 19.5067 476.082 19.7317 cv
475.679 19.9507 475.2 20.0597 474.633 20.0597 cv
473.71 20.0597 472.951 19.6907 472.37 18.9527 cv
471.789 18.2147 471.502 17.2437 471.502 16.0406 cv
471.502 14.8376 471.789 13.8667 472.37 13.1287 cv
472.951 12.3896 473.71 12.0207 474.633 12.0207 cv
475.2 12.0207 475.679 12.1307 476.082 12.3557 cv
476.485 12.5746 476.82 12.9097 477.087 13.3677 cv
472.801 16.0406 mo
472.801 16.9637 472.992 17.6947 473.368 18.2217 cv
473.751 18.7477 474.277 19.0077 474.941 19.0077 cv
475.604 19.0077 476.13 18.7477 476.513 18.2217 cv
476.896 17.6947 477.087 16.9637 477.087 16.0406 cv
477.087 15.1177 476.896 14.3927 476.513 13.8667 cv
476.13 13.3407 475.604 13.0737 474.941 13.0737 cv
474.277 13.0737 473.751 13.3407 473.368 13.8667 cv
472.992 14.3927 472.801 15.1177 472.801 16.0406 cv
ef
485.424 9.6557 mo
491.877 9.6557 li
491.877 10.8177 li
486.805 10.8177 li
486.805 13.8397 li
491.665 13.8397 li
491.665 15.0017 li
486.805 15.0017 li
486.805 18.6997 li
492 18.6997 li
492 19.8617 li
485.424 19.8617 li
485.424 9.6557 li
ef
498.686 13.3817 mo
498.542 13.2997 498.392 13.2377 498.221 13.2037 cv
498.057 13.1627 497.873 13.1427 497.674 13.1427 cv
496.963 13.1427 496.416 13.3747 496.034 13.8397 cv
495.658 14.2977 495.466 14.9607 495.466 15.8287 cv
495.466 19.8617 li
494.202 19.8617 li
494.202 12.2057 li
495.466 12.2057 li
495.466 13.3957 li
495.733 12.9307 496.075 12.5887 496.499 12.3627 cv
496.922 12.1377 497.435 12.0217 498.043 12.0217 cv
498.132 12.0217 498.228 12.0277 498.331 12.0417 cv
498.433 12.0487 498.549 12.0687 498.679 12.0897 cv
498.686 13.3817 li
ef
504.206 13.3817 mo
504.062 13.2997 503.912 13.2377 503.741 13.2037 cv
503.577 13.1627 503.393 13.1427 503.194 13.1427 cv
502.483 13.1427 501.936 13.3747 501.554 13.8397 cv
501.178 14.2977 500.986 14.9607 500.986 15.8287 cv
500.986 19.8617 li
499.722 19.8617 li
499.722 12.2057 li
500.986 12.2057 li
500.986 13.3957 li
501.253 12.9307 501.595 12.5887 502.019 12.3627 cv
502.442 12.1377 502.955 12.0217 503.563 12.0217 cv
503.652 12.0217 503.748 12.0277 503.851 12.0417 cv
503.953 12.0487 504.069 12.0687 504.199 12.0897 cv
504.206 13.3817 li
ef
508.256 13.0877 mo
507.579 13.0877 507.046 13.3547 506.656 13.8807 cv
506.267 14.4067 506.069 15.1247 506.069 16.0407 cv
506.069 16.9567 506.26 17.6817 506.65 18.2077 cv
507.039 18.7337 507.579 18.9937 508.256 18.9937 cv
508.926 18.9937 509.459 18.7277 509.849 18.2007 cv
510.238 17.6747 510.437 16.9497 510.437 16.0407 cv
510.437 15.1317 510.238 14.4137 509.849 13.8877 cv
509.459 13.3547 508.926 13.0877 508.256 13.0877 cv
508.256 12.0217 mo
509.35 12.0217 510.211 12.3767 510.833 13.0877 cv
511.455 13.7987 511.77 14.7827 511.77 16.0407 cv
511.77 17.2917 511.455 18.2757 510.833 18.9937 cv
510.211 19.7047 509.35 20.0607 508.256 20.0607 cv
507.155 20.0607 506.294 19.7047 505.672 18.9937 cv
505.05 18.2757 504.742 17.2917 504.742 16.0407 cv
504.742 14.7827 505.05 13.7987 505.672 13.0877 cv
506.294 12.3767 507.155 12.0217 508.256 12.0217 cv
ef
518.246 13.3817 mo
518.102 13.2997 517.952 13.2377 517.781 13.2037 cv
517.617 13.1627 517.433 13.1427 517.234 13.1427 cv
516.523 13.1427 515.976 13.3747 515.594 13.8397 cv
515.218 14.2977 515.026 14.9607 515.026 15.8287 cv
515.026 19.8617 li
513.762 19.8617 li
513.762 12.2057 li
515.026 12.2057 li
515.026 13.3957 li
515.293 12.9307 515.635 12.5887 516.059 12.3627 cv
516.482 12.1377 516.995 12.0217 517.603 12.0217 cv
517.692 12.0217 517.788 12.0277 517.891 12.0417 cv
517.993 12.0487 518.109 12.0687 518.239 12.0897 cv
518.246 13.3817 li
ef
512.896 53.0267 mo
580.53 53.0267 li
582.13 53.0267 582.93 52.2267 582.93 50.6267 cv
582.93 34.2017 li
582.93 32.6017 582.13 31.8017 580.53 31.8017 cv
512.896 31.8017 li
511.296 31.8017 510.496 32.6017 510.496 34.2017 cv
510.496 50.6267 li
510.496 52.2267 511.296 53.0267 512.896 53.0267 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
0 lc
0 lj
512.896 53.0267 mo
580.53 53.0267 li
582.13 53.0267 582.93 52.2267 582.93 50.6267 cv
582.93 34.2017 li
582.93 32.6017 582.13 31.8017 580.53 31.8017 cv
512.896 31.8017 li
511.296 31.8017 510.496 32.6017 510.496 34.2017 cv
510.496 50.6267 li
510.496 52.2267 511.296 53.0267 512.896 53.0267 cv
cp
1 /0 /CSD get_res sepcs
.2 sep
@
1.5 lw
2 lc
1 lj
515.296 41.5267 mo
539.296 41.5267 li
.905547 .71957 0 0 cmyk
@
527.296 44.5267 mo
528.092 44.5267 528.855 44.2107 529.417 43.6477 cv
529.98 43.0857 530.296 42.3227 530.296 41.5267 cv
530.296 40.7307 529.98 39.9677 529.417 39.4057 cv
528.855 38.8427 528.092 38.5267 527.296 38.5267 cv
526.5 38.5267 525.737 38.8427 525.175 39.4057 cv
524.612 39.9677 524.296 40.7307 524.296 41.5267 cv
524.296 42.3227 524.612 43.0857 525.175 43.6477 cv
525.737 44.2107 526.5 44.5267 527.296 44.5267 cv
cp
f
1 lw
0 lc
527.296 44.5267 mo
528.092 44.5267 528.855 44.2107 529.417 43.6477 cv
529.98 43.0857 530.296 42.3227 530.296 41.5267 cv
530.296 40.7307 529.98 39.9677 529.417 39.4057 cv
528.855 38.8427 528.092 38.5267 527.296 38.5267 cv
526.5 38.5267 525.737 38.8427 525.175 39.4057 cv
524.612 39.9677 524.296 40.7307 524.296 41.5267 cv
524.296 42.3227 524.612 43.0857 525.175 43.6477 cv
525.737 44.2107 526.5 44.5267 527.296 44.5267 cv
cp
@
550.028 37.0337 mo
555.559 37.0337 li
555.559 38.0297 li
551.212 38.0297 li
551.212 40.6197 li
555.378 40.6197 li
555.378 41.6157 li
551.212 41.6157 li
551.212 44.7857 li
555.665 44.7857 li
555.665 45.7817 li
550.028 45.7817 li
550.028 37.0337 li
1 /0 /CSD get_res sepcs
1 sep
ef
561.464 40.2267 mo
561.341 40.1567 561.212 40.1037 561.066 40.0747 cv
560.925 40.0387 560.767 40.0217 560.597 40.0217 cv
559.987 40.0217 559.519 40.2207 559.191 40.6197 cv
558.868 41.0117 558.704 41.5807 558.704 42.3247 cv
558.704 45.7817 li
557.62 45.7817 li
557.62 39.2187 li
558.704 39.2187 li
558.704 40.2387 li
558.933 39.8397 559.226 39.5467 559.589 39.3537 cv
559.952 39.1607 560.392 39.0607 560.913 39.0607 cv
560.989 39.0607 561.071 39.0667 561.159 39.0787 cv
561.247 39.0837 561.347 39.1017 561.458 39.1197 cv
561.464 40.2267 li
ef
566.144 40.2267 mo
566.021 40.1567 565.892 40.1037 565.746 40.0747 cv
565.605 40.0387 565.447 40.0217 565.277 40.0217 cv
564.667 40.0217 564.199 40.2207 563.871 40.6197 cv
563.548 41.0117 563.384 41.5807 563.384 42.3247 cv
563.384 45.7817 li
562.3 45.7817 li
562.3 39.2187 li
563.384 39.2187 li
563.384 40.2387 li
563.613 39.8397 563.906 39.5467 564.269 39.3537 cv
564.632 39.1607 565.072 39.0607 565.593 39.0607 cv
565.669 39.0607 565.751 39.0667 565.839 39.0787 cv
565.927 39.0837 566.027 39.1017 566.138 39.1197 cv
566.144 40.2267 li
ef
569.564 39.9747 mo
568.984 39.9747 568.527 40.2037 568.193 40.6547 cv
567.859 41.1057 567.689 41.7207 567.689 42.5057 cv
567.689 43.2907 567.853 43.9117 568.187 44.3637 cv
568.521 44.8147 568.984 45.0367 569.564 45.0367 cv
570.138 45.0367 570.595 44.8087 570.929 44.3577 cv
571.263 43.9067 571.433 43.2857 571.433 42.5057 cv
571.433 41.7267 571.263 41.1117 570.929 40.6607 cv
570.595 40.2037 570.138 39.9747 569.564 39.9747 cv
569.564 39.0607 mo
570.502 39.0607 571.24 39.3657 571.773 39.9747 cv
572.306 40.5837 572.576 41.4277 572.576 42.5057 cv
572.576 43.5787 572.306 44.4217 571.773 45.0367 cv
571.24 45.6467 570.502 45.9517 569.564 45.9517 cv
568.621 45.9517 567.882 45.6467 567.349 45.0367 cv
566.816 44.4217 566.552 43.5787 566.552 42.5057 cv
566.552 41.4277 566.816 40.5837 567.349 39.9747 cv
567.882 39.3657 568.621 39.0607 569.564 39.0607 cv
ef
578.144 40.2267 mo
578.021 40.1567 577.892 40.1037 577.746 40.0747 cv
577.605 40.0387 577.447 40.0217 577.277 40.0217 cv
576.667 40.0217 576.199 40.2207 575.871 40.6197 cv
575.548 41.0117 575.384 41.5807 575.384 42.3247 cv
575.384 45.7817 li
574.3 45.7817 li
574.3 39.2187 li
575.384 39.2187 li
575.384 40.2387 li
575.613 39.8397 575.906 39.5467 576.269 39.3537 cv
576.632 39.1607 577.072 39.0607 577.593 39.0607 cv
577.669 39.0607 577.751 39.0667 577.839 39.0787 cv
577.927 39.0837 578.027 39.1017 578.138 39.1197 cv
578.144 40.2267 li
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
